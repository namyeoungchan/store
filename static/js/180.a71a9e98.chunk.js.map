{"version":3,"file":"static/js/180.a71a9e98.chunk.js","mappings":"gJACO,MAAMA,EAGX,yBAAaC,CAAaC,GACxB,MACMC,GADU,IAAIC,aACCC,OAAOH,EAAW,yBACjCI,QAAmBC,OAAOC,OAAOC,OAAO,UAAWN,GAEzD,OADkBO,MAAMC,KAAK,IAAIC,WAAWN,IAC3BO,IAAIC,GAAKA,EAAEC,SAAS,IAAIC,SAAS,EAAG,MAAMC,KAAK,GAClE,CAGA,2BAAaC,CAAehB,EAAkBiB,GAE5C,aAD0BC,KAAKnB,aAAaC,KACrBiB,CACzB,CAGA,2BAAOE,GACL,MAAMC,EAAQ,uCACd,IAAIC,EAAS,GACb,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IACrBD,GAAUD,EAAMG,OAAOC,KAAKC,MAAsBL,GAAhBI,KAAKE,WAEzC,OAAOL,CACT,CAGA,uBAAOM,CAAiB3B,GACtB,MAAM4B,EAAmB,GAUzB,OARI5B,EAAS6B,OAAS,GACpBD,EAAOE,KAAK,gHAGV9B,EAAS6B,OAAS,IACpBD,EAAOE,KAAK,2GAGP,CACLC,MAAyB,IAAlBH,EAAOC,OACdD,SAEJ,E,iFCnCK,MAAMI,EAOX,kBAAaC,CAAMC,EAAelC,GAChC,IACE,MAAMmC,QAAeC,EAAAA,EAAYC,iBAAiBH,EAAOlC,GAEzD,IAAKmC,EACH,MAAO,CAAEG,SAAS,EAAOC,MAAO,qHAGlC,IAAKJ,EAAOK,UACV,MAAO,CAAEF,SAAS,EAAOC,MAAO,iIAGlC,MAAME,EAAa,CACjBC,GAAIP,EAAOO,GAAI7B,WACf8B,KAAMR,EAAOS,UACbV,MAAOC,EAAOD,MACdW,KAAM,YAIFC,EAAc,CAClBC,MAFY7B,KAAK8B,cAAcP,EAAKC,IAGpCD,OACAQ,UAAWC,KAAKC,MAChBC,WAAYF,KAAKC,MAAQjC,KAAKmC,kBAIhC,OADAC,aAAaC,QAAQrC,KAAKsC,iBAAkBC,KAAKC,UAAUZ,IACpD,CAAER,SAAS,EAAMG,OAC1B,CAAE,MAAOF,GAEP,OADAoB,QAAQpB,MAAM,eAAgBA,GACvB,CAAED,SAAS,EAAOC,MAAO,qFAClC,CACF,CAKA,aAAOqB,GACLN,aAAaO,WAAW3C,KAAKsC,iBAC/B,CAKA,sBAAOM,GACL,MAAMhB,EAAc5B,KAAK6C,iBACzB,QAAKjB,MAGDI,KAAKC,MAAQL,EAAYM,cAC3BlC,KAAK0C,UACE,GAIX,CAKA,qBAAOI,GACL,MAAMlB,EAAc5B,KAAK6C,iBACzB,OAAKjB,GAAgB5B,KAAK4C,mBAE1BG,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACKnB,EAAYL,MAAI,IACnBQ,UAAWH,EAAYG,YAJ2B,IAMtD,CAKA,oBAAOiB,GACL,MAAMpB,EAAc5B,KAAK6C,iBACrBjB,GAAe5B,KAAK4C,oBACtBhB,EAAYM,WAAaF,KAAKC,MAAQjC,KAAKmC,iBAC3CC,aAAaC,QAAQrC,KAAKsC,iBAAkBC,KAAKC,UAAUZ,IAE/D,CAKA,yBAAOqB,GACL,MAAMrB,EAAc5B,KAAK6C,iBACzB,OAAKjB,EAEEtB,KAAK4C,IAAI,EAAGtB,EAAYM,WAAaF,KAAKC,OAFxB,CAG3B,CAKA,iCAAakB,GACX,IAEE,aADuBjC,EAAAA,EAAYkC,eAEhCC,OAAO9B,GAAQA,EAAK+B,eAAiB/B,EAAKD,WAC1C7B,IAAI8B,IAAI,CACPP,MAAOO,EAAKP,MACZS,KAAMF,EAAKG,UACX6B,UAAWhC,EAAKiC,mBAEtB,CAAE,MAAOnC,GAEP,OADAoB,QAAQpB,MAAM,qCAAsCA,GAC7C,EACT,CACF,CAKA,oBAAeS,CAAc2B,GAC3B,OAAOC,KAAK,GAADC,OAAIF,EAAM,KAAAE,OAAI3B,KAAKC,MAAK,KAAA0B,OAAIrD,KAAKE,UAC9C,CAKA,qBAAeqC,GAMb,IACE,MAAM9D,EAAOqD,aAAawB,QAAQ5D,KAAKsC,kBACvC,OAAOvD,EAAOwD,KAAKsB,MAAM9E,GAAQ,IACnC,CAAE,MAAA+E,GACA,OAAO,IACT,CACF,EA5IWhD,EACawB,iBAAmB,oBADhCxB,EAEaqB,iBAAmB,M,aCH7C,MAkMA,EAlM4C4B,IAAyB,IAAxB,eAAEC,GAAgBD,EAC7D,MAAO/C,EAAOiD,IAAYC,EAAAA,EAAAA,UAAS,KAC5BpF,EAAUqF,IAAeD,EAAAA,EAAAA,UAAS,KAClC7C,EAAO+C,IAAYF,EAAAA,EAAAA,UAAS,KAC5BG,EAAWC,IAAgBJ,EAAAA,EAAAA,WAAS,IACpCK,EAAgBC,IAAqBN,EAAAA,EAAAA,UAAmE,KAE/GO,EAAAA,EAAAA,WAAU,KACRC,KACC,IAEH,MAAMA,EAAqBC,UACzB,IACE,MAAMC,QAAc9D,EAAgBqC,uBACpCqB,EAAkBI,EACpB,CAAE,MAAOvD,GACPoB,QAAQpB,MAAM,iCAAkCA,EAClD,GA+CF,OACEwD,EAAAA,EAAAA,KAAA,OAAKC,UAAU,uBAAsBC,UACnCC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,wBAAuBC,SAAA,EACpCC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,kBAAiBC,SAAA,EAC9BC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,oBAAmBC,SAAA,EAChCF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,kBAAiBC,SAAC,oCACjCF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,qCACJF,EAAAA,EAAAA,KAAA,KAAAE,SAAG,iEAGLC,EAAAA,EAAAA,MAAA,QAAMC,SAtDON,UACnBO,EAAEC,iBACFf,EAAS,IACTE,GAAa,GAEb,IACE,MAAMnE,QAAeW,EAAgBC,MAAMC,EAAOlC,GAE9CqB,EAAOiB,QACT4C,KAEAI,EAASjE,EAAOkB,OAAS,kEACzB8C,EAAY,IAEhB,CAAE,MAAOiB,GACPhB,EAAS,sFACT3B,QAAQpB,MAAM,eAAgB+D,EAChC,CAAC,QACCd,GAAa,EACf,GAmCoCQ,UAAU,kBAAiBC,SAAA,EACvDC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,kBAAiBC,SAAA,EAC9BF,EAAAA,EAAAA,KAAA,SAAOQ,QAAQ,QAAQP,UAAU,kBAAiBC,SAAC,wBAGnDC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,qBAAoBC,SAAA,EACjCF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,kBAAiBC,SAAC,kBAClCF,EAAAA,EAAAA,KAAA,SACErD,GAAG,QACH8D,KAAK,QACLC,MAAOvE,EACPwE,SA3CWN,IACzBjB,EAASiB,EAAEO,OAAOF,OACdlE,GAAO+C,EAAS,KA0CNsB,YAAY,0DACZZ,UAAU,kBACVa,UAAQ,EACRC,SAAUvB,WAKhBW,EAAAA,EAAAA,MAAA,OAAKF,UAAU,kBAAiBC,SAAA,EAC9BF,EAAAA,EAAAA,KAAA,SAAOQ,QAAQ,WAAWP,UAAU,kBAAiBC,SAAC,8BAGtDC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,qBAAoBC,SAAA,EACjCF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,kBAAiBC,SAAC,kBAClCF,EAAAA,EAAAA,KAAA,SACErD,GAAG,WACH8D,KAAK,WACLC,MAAOzG,EACP0G,SAzDcN,IAC5Bf,EAAYe,EAAEO,OAAOF,OACjBlE,GAAO+C,EAAS,KAwDNsB,YAAY,gEACZZ,UAAU,kBACVa,UAAQ,EACRC,SAAUvB,UAKfhD,IACC2D,EAAAA,EAAAA,MAAA,OAAKF,UAAU,qBAAoBC,SAAA,EACjCF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,kBAAiBC,SAAC,iBACjC1D,MAILwD,EAAAA,EAAAA,KAAA,UACES,KAAK,SACLR,UAAS,qBAAAnB,OAAuBU,EAAY,UAAY,IACxDuB,SAAUvB,IAAcrD,EAAM6E,SAAW/G,EAAS+G,OAAOd,SAExDV,GACCW,EAAAA,EAAAA,MAAAc,EAAAA,SAAA,CAAAf,SAAA,EACEF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,uBAAsBC,SAAC,WAAQ,mCAIjDC,EAAAA,EAAAA,MAAAc,EAAAA,SAAA,CAAAf,SAAA,EACEF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,yBAAwBC,SAAC,iBAAS,6BAQzDR,EAAe5D,OAAS,IACvBqE,EAAAA,EAAAA,MAAA,OAAKF,UAAU,sBAAqBC,SAAA,EAClCC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,qBAAoBC,SAAA,EACjCF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,mBAAkBC,SAAC,YACnCF,EAAAA,EAAAA,KAAA,QAAAE,SAAM,0EAERF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,sBAAqBC,SACjCR,EAAewB,MAAM,EAAG,GAAGtG,IAAK8B,IAC/ByD,EAAAA,EAAAA,MAAA,UAEEM,KAAK,SACLR,UAAS,mBAAAnB,OAAqBpC,EAAKgC,QAAU,gBAAkB,IAC/DyC,QAASA,KAAMC,OApGbC,EAoGwB3E,EAAKP,MApGVmF,EAoGiB5E,EAAKgC,QAnG3DU,EAASiC,GACLC,GAEFC,MAAM,2NACNjC,EAAY,KAEZA,EAAY,SAEdC,EAAS,IATQ6B,IAACC,EAAmBC,GAqGrBP,SAAUvB,EAAUU,SAAA,CAEnBxD,EAAKE,KACLF,EAAKgC,UAAWsB,EAAAA,EAAAA,KAAA,QAAMC,UAAU,aAAYC,SAAC,mBAPzCxD,EAAKP,WAWhBgE,EAAAA,EAAAA,MAAA,OAAKF,UAAU,YAAWC,SAAA,EACxBF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,YAAWC,SAAC,kBAC5BF,EAAAA,EAAAA,KAAA,QAAAE,SACGR,EAAe8B,KAAKC,GAAKA,EAAE/C,SACxB,4IACA,yGAOZsB,EAAAA,EAAAA,KAAA,OAAKC,UAAU,oBAAmBC,UAChCC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,qBAAoBC,SAAA,EACjCF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,qBAAoBC,SAAC,wBACrCF,EAAAA,EAAAA,KAAA,QAAAE,SAAM,yFAMZC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,oBAAmBC,SAAA,EAChCF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,8BAA6BC,SAAC,YAC7CF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,8BAA6BC,SAAC,kBAC7CF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,8BAA6BC,SAAC,kBAC7CF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,8BAA6BC,SAAC,kBAC7CF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,8BAA6BC,SAAC,kBAC7CF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,8BAA6BC,SAAC,0BC9KhD,MAAMwB,EAMX,kBAAOC,CACL/C,EACAgD,EACAC,EACAC,EACAC,EACAC,GAEA,MAAMC,EAAU9G,KAAK+G,gBAGfC,EAAgBF,EAAQG,UAC5BC,GAAUA,EAAOzD,SAAWA,GAAUyD,EAAOT,OAASA,GAGlDU,EAAanH,KAAKoH,mBAAmBV,EAAWC,EAASC,GAEzDS,EAAqB,CACzB7F,GAAIwF,GAAiB,EAAIF,EAAQE,GAAexF,GAAKxB,KAAKsH,aAC1D7D,SACAgD,OACAC,YACAC,UACAC,YACAO,aACAN,QACAU,UAAWP,GAAiB,EAAIF,EAAQE,GAAeO,UAAY,IAAIvF,KACvEwF,UAAW,IAAIxF,MAYjB,OATIgF,GAAiB,EAEnBF,EAAQE,GAAiBK,EAGzBP,EAAQlG,KAAKyG,GAGfrH,KAAKyH,YAAYX,GACVO,CACT,CAKA,uBAAOK,CAAiBjE,EAAgBkE,GACtC,MAAMb,EAAU9G,KAAK+G,gBAClB1D,OAAO6D,GAAUA,EAAOzD,SAAWA,GACnCmE,KAAK,CAACC,EAAGnI,IAAM,IAAIsC,KAAKtC,EAAE+G,MAAMqB,UAAY,IAAI9F,KAAK6F,EAAEpB,MAAMqB,WAEhE,OAAOH,EAAQb,EAAQf,MAAM,EAAG4B,GAASb,CAC3C,CAKA,wBAAOiB,CAAkBtE,EAAgBgD,GAEvC,OADgBzG,KAAK+G,gBACNiB,KAAKd,GAAUA,EAAOzD,SAAWA,GAAUyD,EAAOT,OAASA,IAAS,IACrF,CAKA,qBAAOwB,CAAexE,GACpB,MAAMqD,EAAU9G,KAAK0H,iBAAiBjE,GAChCxB,EAAM,IAAID,KAGVkG,EAAc,IAAIlG,KAAKC,GAC7BiG,EAAYC,QAAQlG,EAAImG,UAAYnG,EAAIoG,UACxCH,EAAYI,SAAS,EAAG,EAAG,EAAG,GAG9B,MAAMC,EAAe,IAAIvG,KAAKC,EAAIuG,cAAevG,EAAIwG,WAAY,GAE3DtB,EAAaL,EAAQ4B,OAAO,CAACC,EAAKzB,IAAWyB,EAAMzB,EAAOC,WAAY,GACtEyB,EAAgB9B,EACnBzD,OAAO6D,GAAU,IAAIlF,KAAKkF,EAAOT,OAASyB,GAC1CQ,OAAO,CAACC,EAAKzB,IAAWyB,EAAMzB,EAAOC,WAAY,GAE9C0B,EAAiB/B,EACpBzD,OAAO6D,GAAU,IAAIlF,KAAKkF,EAAOT,OAAS8B,GAC1CG,OAAO,CAACC,EAAKzB,IAAWyB,EAAMzB,EAAOC,WAAY,GAEpD,MAAO,CACL2B,UAAWhC,EAAQnG,OACnBwG,aACA4B,aAAcjC,EAAQnG,OAAS,EAAIwG,EAAaL,EAAQnG,OAAS,EACjEiI,gBACAC,iBAEJ,CAKA,oBAAOG,CAAcvF,GACnB,MAAMqD,EAAU9G,KAAK0H,iBAAiBjE,GAChCtD,EAAS,GACT8I,EAAQ,IAAIjH,KAElB,IAAK,IAAI5B,EAAI,EAAGA,GAAK,EAAGA,IAAK,CAC3B,MAAMqG,EAAO,IAAIzE,KAAKiH,GACtBxC,EAAK0B,QAAQc,EAAMb,UAAYhI,GAC/B,MAAM8I,EAAazC,EAAK0C,cAAcC,MAAM,KAAK,GAE3ClC,EAASJ,EAAQkB,KAAKqB,GAAKA,EAAE5C,OAASyC,GACtCI,EAAW,CAAC,SAAK,SAAK,SAAK,SAAK,SAAK,SAAK,UAEhDnJ,EAAOS,KAAK,CACV6F,KAAMyC,EACNK,MAAOrC,EAASA,EAAOC,WAAa,EACpCqC,QAASF,EAAS7C,EAAK4B,WAE3B,CAEA,OAAOlI,CACT,CAKA,qBAAOsJ,CAAehG,EAAgBiG,GACpC,MAAM5C,EAAU9G,KAAK+G,gBACf4C,EAAQ7C,EAAQG,UACpBC,GAAUA,EAAO1F,KAAOkI,GAAcxC,EAAOzD,SAAWA,GAG1D,OAAIkG,GAAS,IACX7C,EAAQ8C,OAAOD,EAAO,GACtB3J,KAAKyH,YAAYX,IACV,EAIX,CAKA,yBAAeM,CAAmBV,EAAmBC,EAAiBC,GACpE,MAAOiD,EAAWC,GAAYpD,EAAU0C,MAAM,KAAK3J,IAAIsK,SAChDC,EAASC,GAAUtD,EAAQyC,MAAM,KAAK3J,IAAIsK,QAE3CG,EAA2B,GAAZL,EAAiBC,EACtC,IAAIK,EAAuB,GAAVH,EAAeC,EAG5BE,EAAaD,IACfC,GAAc,MAGhB,MAAMC,EAAeD,EAAaD,EAAetD,EACjD,OAAOtG,KAAK4C,IAAI,EAAGkH,EAAe,GACpC,CAKA,oBAAerD,GACb,IACE,MAAMhI,EAAOqD,aAAawB,QAAQ5D,KAAKqK,aACvC,OAAOtL,EAAOwD,KAAKsB,MAAM9E,GAAQ,EACnC,CAAE,MAAA+E,GACA,MAAO,EACT,CACF,CAKA,kBAAe2D,CAAYX,GACzB1E,aAAaC,QAAQrC,KAAKqK,YAAa9H,KAAKC,UAAUsE,GACxD,CAKA,iBAAeQ,GACb,OAAOtF,KAAKC,MAAMtC,SAAS,IAAMW,KAAKE,SAASb,SAAS,IAAI2K,OAAO,EACrE,EA3LW/D,EACa8D,YAAc,oB,cCXxC,MA4JA,EA5JgEtG,IAKzD,IAL0D,OAC/DwG,EAAM,OACN9G,EAAM,QACN+G,EAAO,UACPC,GACD1G,EACC,MAAO2G,EAAiBC,IAAsBzG,EAAAA,EAAAA,UAAS,KAChD0G,EAAaC,IAAkB3G,EAAAA,EAAAA,UAAS,KACxC4G,EAAiBC,IAAsB7G,EAAAA,EAAAA,UAAS,KAChD7C,EAAO+C,IAAYF,EAAAA,EAAAA,UAAS,KAC5BG,EAAWC,IAAgBJ,EAAAA,EAAAA,WAAS,GA0DrC8G,EAAcA,KAClBL,EAAmB,IACnBE,EAAe,IACfE,EAAmB,IACnB3G,EAAS,IACToG,KAGF,OAAKD,GAGH1F,EAAAA,EAAAA,KAAA,OAAKC,UAAU,gBAAeC,UAC5BC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,sCAAqCC,SAAA,EAClDC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,eAAcC,SAAA,EAC3BF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,wDACJF,EAAAA,EAAAA,KAAA,UAAQmB,QAASgF,EAAalG,UAAU,cAAaC,SAAC,aAGxDC,EAAAA,EAAAA,MAAA,QAAMC,SA1ESN,UAKnB,GAJAO,EAAEC,iBACFf,EAAS,KAGJsG,IAAoBE,IAAgBE,EAEvC,YADA1G,EAAS,yEAIX,GAAIwG,IAAgBE,EAElB,YADA1G,EAAS,4FAIX,GAAIsG,IAAoBE,EAEtB,YADAxG,EAAS,4HAIX,MAAM6G,EAAarM,EAAAA,EAAc6B,iBAAiBmK,GAClD,GAAKK,EAAWpK,MAAhB,CAKAyD,GAAa,GAEb,IAEE,MAAM/C,QAAaL,EAAAA,EAAYgK,YAAYzH,GAC3C,IAAKlC,IAASA,EAAK+B,cAEjB,YADAc,EAAS,uFAKX,UAD6BxF,EAAAA,EAAckB,eAAe4K,EAAiBnJ,EAAK+B,eAG9E,YADAc,EAAS,wGAKLlD,EAAAA,EAAYiK,eAAe1H,EAAQmH,GAEzCxE,MAAM,6GACNqE,IACAD,GACF,CAAE,MAAOpF,GACPhB,EAAS,yGACT3B,QAAQpB,MAAM,yBAA0B+D,EAC1C,CAAC,QACCd,GAAa,EACf,CA7BA,MAFEF,EAAS6G,EAAWvK,OAAOb,KAAK,OAoDAiF,UAAU,uBAAsBC,SAAA,CAC3D1D,IACC2D,EAAAA,EAAAA,MAAA,OAAKF,UAAU,gBAAeC,SAAA,EAC5BF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,aAAYC,SAAC,iBAC5B1D,MAIL2D,EAAAA,EAAAA,MAAA,OAAKF,UAAU,aAAYC,SAAA,EACzBF,EAAAA,EAAAA,KAAA,SAAOQ,QAAQ,kBAAiBN,SAAC,6CACjCF,EAAAA,EAAAA,KAAA,SACES,KAAK,WACL9D,GAAG,kBACH+D,MAAOmF,EACPlF,SAAWN,GAAMyF,EAAmBzF,EAAEO,OAAOF,OAC7CG,YAAY,6EACZE,SAAUvB,QAIdW,EAAAA,EAAAA,MAAA,OAAKF,UAAU,aAAYC,SAAA,EACzBF,EAAAA,EAAAA,KAAA,SAAOQ,QAAQ,cAAaN,SAAC,uCAC7BF,EAAAA,EAAAA,KAAA,SACES,KAAK,WACL9D,GAAG,cACH+D,MAAOqF,EACPpF,SAAWN,GAAM2F,EAAe3F,EAAEO,OAAOF,OACzCG,YAAY,uEACZE,SAAUvB,KAEZQ,EAAAA,EAAAA,KAAA,KAAGC,UAAU,gBAAeC,SAAC,sIAK/BC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,aAAYC,SAAA,EACzBF,EAAAA,EAAAA,KAAA,SAAOQ,QAAQ,kBAAiBN,SAAC,oDACjCF,EAAAA,EAAAA,KAAA,SACES,KAAK,WACL9D,GAAG,kBACH+D,MAAOuF,EACPtF,SAAWN,GAAM6F,EAAmB7F,EAAEO,OAAOF,OAC7CG,YAAY,oFACZE,SAAUvB,QAIdW,EAAAA,EAAAA,MAAA,OAAKF,UAAU,eAAcC,SAAA,EAC3BF,EAAAA,EAAAA,KAAA,UACES,KAAK,SACLU,QAASgF,EACTlG,UAAU,mBACVc,SAAUvB,EAAUU,SACrB,kBAGDF,EAAAA,EAAAA,KAAA,UACES,KAAK,SACLR,UAAU,iBACVc,SAAUvB,EAAUU,SAEnBV,EAAY,yBAAY,qDAvEjB,MCqPtB,EAtUgC+G,KAC9B,MAAOC,EAASC,IAAcpH,EAAAA,EAAAA,UAA6B,OACpDqH,EAAYC,IAAiBtH,EAAAA,EAAAA,UAAqB,KAClDuH,EAAYC,IAAiBxH,EAAAA,EAAAA,UAAkE,KAC/FyH,EAAcC,IAAmB1H,EAAAA,EAAAA,UAAwB,OACzD2H,EAAcC,IAAmB5H,EAAAA,EAAAA,UAA0B,OAC3D6H,EAAmBC,IAAwB9H,EAAAA,EAAAA,WAAS,GAErD+H,EAAcnL,EAAgBgC,kBAEpC2B,EAAAA,EAAAA,WAAU,KACJwH,GACFC,KAED,CAACD,IAEJ,MAAMC,EAAoBA,KACxB,IAAKD,EAAa,OAElB,MAAME,EAAc5F,EAAgB0B,eAAegE,EAAYzK,IACzD4K,EAAiB7F,EAAgBmB,iBAAiBuE,EAAYzK,GAAI,IAClE6K,EAAkB9F,EAAgByC,cAAciD,EAAYzK,IAElE8J,EAAWa,GACXX,EAAcY,GACdV,EAAcW,IAWVC,EAAcC,GACXA,EAAWC,UAAU,EAAG,GAG3BC,EAAelD,IACnB,MAAMmD,EAAIpM,KAAKC,MAAMgJ,GACfoD,EAAIrM,KAAKsM,MAAoB,IAAbrD,EAAQmD,IAC9B,MAAM,GAAN/I,OAAU+I,EAAC,iBAAA/I,OAAMgJ,EAAC,WAUdE,EAAqBtD,GACX,IAAVA,EAAoB,qBACpBA,EAAQ,EAAU,qBAClBA,EAAQ,EAAU,eACf,qBAGT,OAAK0C,GAAgBZ,GAYnBrG,EAAAA,EAAAA,MAAA,OAAKF,UAAU,iBAAgBC,SAAA,EAE7BF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,mBAAkBC,UAC/BC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,eAAcC,SAAA,EAC3BF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,cAAaC,SAAC,kBAC9BC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,2CACJC,EAAAA,EAAAA,MAAA,KAAAD,SAAA,CAAIkH,EAAYxK,KAAK,mDAGzBuD,EAAAA,EAAAA,MAAA,OAAKF,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,EAAAA,MAAA,UAAQgB,QAASA,IAAMgG,GAAqB,GAAOlH,UAAU,eAAcC,SAAA,EACzEF,EAAAA,EAAAA,KAAA,QAAAE,SAAM,iBAAS,4CAGjBC,EAAAA,EAAAA,MAAA,UAAQgB,QAASkG,EAAmBpH,UAAU,cAAaC,SAAA,EACzDF,EAAAA,EAAAA,KAAA,QAAAE,SAAM,iBAAS,uCAQvBC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,eAAcC,SAAA,EAC3BC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,qBAAoBC,SAAA,EACjCF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,YAAWC,SAAC,kBAC3BC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,eAAcC,SAAA,EAC3BF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,cAAaC,SAAEsG,EAAQvC,aACtCjE,EAAAA,EAAAA,KAAA,OAAKC,UAAU,aAAYC,SAAC,qCAIhCC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,qBAAoBC,SAAA,EACjCF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,YAAWC,SAAC,YAC3BC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,eAAcC,SAAA,EAC3BF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,cAAaC,SAAEsG,EAAQlE,WAAW2F,QAAQ,MACzDjI,EAAAA,EAAAA,KAAA,OAAKC,UAAU,aAAYC,SAAC,2CAIhCC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,uBAAsBC,SAAA,EACnCF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,YAAWC,SAAC,kBAC3BC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,eAAcC,SAAA,EAC3BF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,cAAaC,SAAEsG,EAAQtC,aAAa+D,QAAQ,MAC3DjI,EAAAA,EAAAA,KAAA,OAAKC,UAAU,aAAYC,SAAC,iDAIhCC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,oBAAmBC,SAAA,EAChCF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,YAAWC,SAAC,kBAC3BC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,eAAcC,SAAA,EAC3BF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,cAAaC,SAAEsG,EAAQzC,cAAckE,QAAQ,MAC5DjI,EAAAA,EAAAA,KAAA,OAAKC,UAAU,aAAYC,SAAC,+CAMlCC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,eAAcC,SAAA,EAC3BF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,gEACJF,EAAAA,EAAAA,KAAA,KAAAE,SAAG,uGAGLF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,eAAcC,SAC1B0G,EAAWhM,IAAI,CAACsN,EAAKpD,KACpB,MAAMqD,EAAW1M,KAAK4C,OAAOuI,EAAWhM,IAAIwN,GAAKA,EAAE1D,OAAQ,GACrD2D,EAASH,EAAIxD,MAAQ,EAAIjJ,KAAK4C,IAAK6J,EAAIxD,MAAQyD,EAAY,IAAK,IAAM,EACtEG,EA/FA,KADY5D,EAgGewD,EAAIxD,OA/FrB,UACpBA,EAAQ,EAAU,UAClBA,EAAQ,EAAU,UACf,UAJmBA,MAkGlB,OACEvE,EAAAA,EAAAA,MAAA,OAEEF,UAAU,YACVkB,QAASA,IAxHES,KACvB,IAAKwF,EAAa,OAElB,MAAMmB,EAAO7G,EAAgBwB,kBAAkBkE,EAAYzK,GAAIiF,GAC/DmF,EAAgBnF,GAChBqF,EAAgBsB,IAmHWC,CAAgBN,EAAItG,MAAM1B,SAAA,EAEzCF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,gBAAeC,UAC5BF,EAAAA,EAAAA,KAAA,OACEC,UAAU,MACVwI,MAAO,CACLJ,OAAO,GAADvJ,OAAKuJ,EAAM,KACjBK,gBAAiBJ,GACjBpI,UAEFF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,YAAWC,SACvBgI,EAAIxD,MAAQ,EAAC,GAAA5F,OAAMoJ,EAAIxD,MAAMuD,QAAQ,GAAE,KAAM,UAIpD9H,EAAAA,EAAAA,MAAA,OAAKF,UAAU,YAAWC,SAAA,EACxBF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,WAAUC,SAAEgI,EAAIvD,WAC/B3E,EAAAA,EAAAA,KAAA,OAAKC,UAAU,OAAMC,SAAEgI,EAAItG,KAAK2C,MAAM,KAAK,UAnBxCO,WA4Bf3E,EAAAA,EAAAA,MAAA,OAAKF,UAAU,sBAAqBC,SAAA,EAClCC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,iBAAgBC,SAAA,EAC7BF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,yDACJF,EAAAA,EAAAA,KAAA,KAAAE,SAAG,sFAGLF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,eAAcC,SACJ,IAAtBwG,EAAW5K,QACVqE,EAAAA,EAAAA,MAAA,OAAKF,UAAU,cAAaC,SAAA,EAC1BF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,aAAYC,SAAC,kBAC5BF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,iFACJF,EAAAA,EAAAA,KAAA,KAAAE,SAAG,uHAGLwG,EAAW9L,IAAK2N,IACdpI,EAAAA,EAAAA,MAAA,OAEEF,UAAU,mBACVkB,QAASA,KACP4F,EAAgBwB,EAAK3G,MACrBqF,EAAgBsB,IAChBrI,SAAA,EAEFC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,cAAaC,SAAA,EAC1BF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,YAAWC,SAAC,iBAC3B,IAAI/C,KAAKoL,EAAK3G,MAAM+G,mBAAmB,QAAS,CAC/CC,MAAO,UACPV,IAAK,UACLW,QAAS,cAGb7I,EAAAA,EAAAA,KAAA,OAAKC,UAAS,eAAAnB,OAAiBkJ,EAAkBO,EAAKjG,YAAYwG,eAAgB5I,SAC/E8H,EAAkBO,EAAKjG,kBAI5BnC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,YAAWC,SAAA,EACxBC,EAAAA,EAAAA,MAAA,QAAMF,UAAU,aAAYC,SAAA,CACzBuH,EAAWc,EAAK1G,WAAW,MAAI4F,EAAWc,EAAKzG,aAElD3B,EAAAA,EAAAA,MAAA,QAAMF,UAAU,aAAYC,SAAA,CAAC,iBACtBqI,EAAKxG,UAAU,iBAGxB/B,EAAAA,EAAAA,KAAA,OAAKC,UAAU,cAAaC,SACzB0H,EAAYW,EAAKjG,iBAIrBiG,EAAKvG,QACJ7B,EAAAA,EAAAA,MAAA,OAAKF,UAAU,eAAcC,SAAA,EAC3BF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,aAAYC,SAAC,iBAC5BqI,EAAKvG,WAtCLuG,EAAK5L,UAgDnBmK,IACC9G,EAAAA,EAAAA,KAAA,OAAKC,UAAU,oBAAoBkB,QAASA,IAAM4F,EAAgB,MAAM7G,UACtEC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,gBAAgBkB,QAAUd,GAAMA,EAAE0I,kBAAkB7I,SAAA,EACjEC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,eAAcC,SAAA,EAC3BC,EAAAA,EAAAA,MAAA,MAAAD,SAAA,CACG,IAAI/C,KAAK2J,GAAc6B,mBAAmB,QAAS,CAClDK,KAAM,UACNJ,MAAO,OACPV,IAAK,UACLW,QAAS,SACR,iCAEL7I,EAAAA,EAAAA,KAAA,UACEC,UAAU,cACVkB,QAASA,IAAM4F,EAAgB,MAAM7G,SACtC,aAKHF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,aAAYC,SACxB8G,GACC7G,EAAAA,EAAAA,MAAAc,EAAAA,SAAA,CAAAf,SAAA,EACEC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,iBAAgBC,SAAA,EAC7BF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,sCACJC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,cAAaC,SAAA,EAC1BF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,QAAOC,SAAC,mBACxBF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,QAAOC,SAAEuH,EAAWT,EAAanF,iBAEnD1B,EAAAA,EAAAA,MAAA,OAAKF,UAAU,cAAaC,SAAA,EAC1BF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,QAAOC,SAAC,mBACxBF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,QAAOC,SAAEuH,EAAWT,EAAalF,eAEnD3B,EAAAA,EAAAA,MAAA,OAAKF,UAAU,cAAaC,SAAA,EAC1BF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,QAAOC,SAAC,+BACxBC,EAAAA,EAAAA,MAAA,QAAMF,UAAU,QAAOC,SAAA,CAAE8G,EAAajF,UAAU,gBAElD5B,EAAAA,EAAAA,MAAA,OAAKF,UAAU,oBAAmBC,SAAA,EAChCF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,QAAOC,SAAC,sCACxBF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,QAAOC,SAAE0H,EAAYZ,EAAa1E,uBAKvD0E,EAAahF,QACZ7B,EAAAA,EAAAA,MAAA,OAAKF,UAAU,iBAAgBC,SAAA,EAC7BF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,+BACJF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,iBAAgBC,UAC7BF,EAAAA,EAAAA,KAAA,KAAGC,UAAU,gBAAeC,SAAE8G,EAAahF,cAKjD7B,EAAAA,EAAAA,MAAA,OAAKF,UAAU,iBAAgBC,SAAA,EAC7BF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,+BACJF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,iBAAgBC,UAC7BF,EAAAA,EAAAA,KAAA,OAAKC,UAAS,gBAAAnB,OAAkBkJ,EAAkBhB,EAAa1E,YAAYwG,eAAgB5I,SACxF8H,EAAkBhB,EAAa1E,uBAMxCnC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,eAAcC,SAAA,EAC3BF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,eAAcC,SAAC,kBAC9BF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,iHACJF,EAAAA,EAAAA,KAAA,KAAAE,SAAG,4IASfF,EAAAA,EAAAA,KAACiJ,EAAmB,CAClBvD,OAAQwB,EACRtI,QAAmB,OAAXwI,QAAW,IAAXA,OAAW,EAAXA,EAAazK,KAAM,IAC3BgJ,QAASA,IAAMwB,GAAqB,GACpCvB,UAAWA,aAhQb5F,EAAAA,EAAAA,KAAA,OAAKC,UAAU,yBAAwBC,UACrCC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,kBAAiBC,SAAA,EAC9BF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,kBAAiBC,SAAC,YACjCF,EAAAA,EAAAA,KAAA,KAAAE,SAAG,4ECwNb,EA1RgCgJ,KAC9B,MAAOtH,EAAM0B,IAAWjE,EAAAA,EAAAA,WAAS,IAAIlC,MAAOmH,cAAcC,MAAM,KAAK,KAC9D1C,EAAWsH,IAAgB9J,EAAAA,EAAAA,UAAS,UACpCyC,EAASsH,IAAc/J,EAAAA,EAAAA,UAAS,UAChC0C,EAAWsH,IAAgBhK,EAAAA,EAAAA,UAAS,KACpC2C,EAAOsH,IAAYjK,EAAAA,EAAAA,UAAS,KAC5BG,EAAWC,IAAgBJ,EAAAA,EAAAA,WAAS,IACpCkK,EAAgBC,IAAqBnK,EAAAA,EAAAA,UAA0B,OAC/DoK,EAAOC,IAAYrK,EAAAA,EAAAA,UAAwE,CAChGsK,MAAM,EACNC,QAAS,GACTnJ,KAAM,YAGF2G,EAAcnL,EAAgBgC,kBAEpC2B,EAAAA,EAAAA,WAAU,KACJwH,GACFyC,KAED,CAACjI,EAAMwF,IAEV,MAAMyC,EAAsBA,KAC1B,IAAKzC,EAAa,OAElB,MAAM0C,EAAWpI,EAAgBwB,kBAAkBkE,EAAYzK,GAAIiF,GAC/DkI,GACFN,EAAkBM,GAClBX,EAAaW,EAASjI,WACtBuH,EAAWU,EAAShI,SACpBuH,EAAaS,EAAS/H,WACtBuH,EAASQ,EAAS9H,OAAS,MAE3BwH,EAAkB,MAClBL,EAAa,SACbC,EAAW,SACXC,EAAa,IACbC,EAAS,MAmBPS,EAAYA,CAACH,EAAiBnJ,KAClCiJ,EAAS,CAAEC,MAAM,EAAMC,UAASnJ,SAChCuJ,WAAW,KACTN,EAAS,CAAEC,MAAM,EAAOC,QAAS,GAAInJ,KAAM,aAC1C,MA8CCwJ,EAAeA,CAACC,EAAgBC,EAAcC,KAClDjB,EAAa,GAADrK,OAAIoL,EAAOpP,WAAWC,SAAS,EAAG,KAAI,QAClDqO,EAAW,GAADtK,OAAIqL,EAAKrP,WAAWC,SAAS,EAAG,KAAI,QAC9CsO,EAAae,IAGTC,EAvEiBC,EAACC,EAAeC,EAAaC,KAClD,MAAOzF,EAAWC,GAAYsF,EAAMhG,MAAM,KAAK3J,IAAIsK,SAC5CC,EAASC,GAAUoF,EAAIjG,MAAM,KAAK3J,IAAIsK,QAEvCG,EAA2B,GAAZL,EAAiBC,EACtC,IAAIK,EAAuB,GAAVH,EAAeC,EAE5BE,EAAaD,IACfC,GAAc,MAGhB,MAAMC,EAAeD,EAAaD,EAAeoF,EACjD,OAAOhP,KAAK4C,IAAI,EAAGkH,EAAe,KA2Df+E,CAAezI,EAAWC,EAASC,GAClD2I,EAAcL,EAAe,GAAKA,GAAgB,GAExD,OACElK,EAAAA,EAAAA,MAAA,OAAKF,UAAU,kBAAiBC,SAAA,EAC9BC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,eAAcC,SAAA,EAC3BC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,cAAaC,SAAA,EAC1BF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,aAAYC,SAAC,YAC7BC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,2CACJF,EAAAA,EAAAA,KAAA,KAAAE,SAAG,iGAGNqJ,IACCpJ,EAAAA,EAAAA,MAAA,OAAKF,UAAU,iBAAgBC,SAAA,EAC7BF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,YAAWC,SAAC,kBAC5BF,EAAAA,EAAAA,KAAA,QAAAE,SAAM,qCAKZC,EAAAA,EAAAA,MAAA,QAAMC,SAtEYC,IAEpB,GADAA,EAAEC,iBACG8G,EAAL,CAKA3H,GAAa,GAEb,IACE,MAAM+C,EAAWd,EAAgBC,YAC/ByF,EAAYzK,GACZiF,EACAC,EACAC,EACAC,EACAC,EAAMhB,aAAU2J,GAQlB,GAJAZ,EAAU,iEAADjL,OADUyK,EAAiB,eAAO,eACR,mCAAU,WAC7CC,EAAkBhH,IAGb+G,EAAgB,CACnB,MAAMqB,EAAU,IAAIzN,KAAKyE,GACzBgJ,EAAQtH,QAAQsH,EAAQrH,UAAY,GACpC,MAAMsH,EAAiBD,EAAQtG,cAAcC,MAAM,KAAK,GAIpDsG,IADU,IAAI1N,MAAOmH,cAAcC,MAAM,KAAK,IAEhDjB,EAAQuH,EAEZ,CACF,CAAE,MAAOrO,GACPuN,EAAU,oFAAoB,SAC9BnM,QAAQpB,MAAMA,EAChB,CAAC,QACCiD,GAAa,EACf,CAnCA,MAFEsK,EAAU,2DAAe,UAmEK9J,UAAU,YAAWC,SAAA,EACjDC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,eAAcC,SAAA,EAC3BF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,gBAAeC,SAAC,4CAE9BF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,WAAUC,UACvBC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,aAAYC,SAAA,EACzBF,EAAAA,EAAAA,KAAA,SAAOQ,QAAQ,OAAOP,UAAU,aAAYC,SAAC,kBAC7CF,EAAAA,EAAAA,KAAA,SACErD,GAAG,OACH8D,KAAK,OACLC,MAAOkB,EACPjB,SAAWN,GAAMiD,EAAQjD,EAAEO,OAAOF,OAClCrC,KAAK,IAAIlB,MAAOmH,cAAcC,MAAM,KAAK,GACzCtE,UAAU,aACVa,UAAQ,aAMhBX,EAAAA,EAAAA,MAAA,OAAKF,UAAU,eAAcC,SAAA,EAC3BF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,gBAAeC,SAAC,2CAE9BC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,cAAaC,SAAA,EAC1BF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,qBAAoBC,SAAC,+BACpCC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,qBAAoBC,SAAA,EACjCF,EAAAA,EAAAA,KAAA,UACES,KAAK,SACLR,UAAU,iBACVkB,QAASA,IAAM8I,EAAa,EAAG,GAAI,IAAI/J,SACxC,8CAGDF,EAAAA,EAAAA,KAAA,UACES,KAAK,SACLR,UAAU,iBACVkB,QAASA,IAAM8I,EAAa,GAAI,GAAI,IAAI/J,SACzC,8CAGDF,EAAAA,EAAAA,KAAA,UACES,KAAK,SACLR,UAAU,iBACVkB,QAASA,IAAM8I,EAAa,GAAI,GAAI,IAAI/J,SACzC,+CAMLC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,WAAUC,SAAA,EACvBC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,aAAYC,SAAA,EACzBF,EAAAA,EAAAA,KAAA,SAAOQ,QAAQ,YAAYP,UAAU,aAAYC,SAAC,+BAClDF,EAAAA,EAAAA,KAAA,SACErD,GAAG,YACH8D,KAAK,OACLC,MAAOmB,EACPlB,SAAWN,GAAM8I,EAAa9I,EAAEO,OAAOF,OACvCT,UAAU,aACVa,UAAQ,QAGZX,EAAAA,EAAAA,MAAA,OAAKF,UAAU,aAAYC,SAAA,EACzBF,EAAAA,EAAAA,KAAA,SAAOQ,QAAQ,UAAUP,UAAU,aAAYC,SAAC,+BAChDF,EAAAA,EAAAA,KAAA,SACErD,GAAG,UACH8D,KAAK,OACLC,MAAOoB,EACPnB,SAAWN,GAAM+I,EAAW/I,EAAEO,OAAOF,OACrCT,UAAU,aACVa,UAAQ,WAKdX,EAAAA,EAAAA,MAAA,OAAKF,UAAU,WAAUC,SAAA,EACvBC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,aAAYC,SAAA,EACzBF,EAAAA,EAAAA,KAAA,SAAOQ,QAAQ,YAAYP,UAAU,aAAYC,SAAC,uCAClDC,EAAAA,EAAAA,MAAA,UACExD,GAAG,YACH+D,MAAOqB,EACPpB,SAAWN,GAAMgJ,EAAanE,OAAO7E,EAAEO,OAAOF,QAC9CT,UAAU,aACVa,UAAQ,EAAAZ,SAAA,EAERF,EAAAA,EAAAA,KAAA,UAAQU,MAAO,EAAER,SAAC,aAClBF,EAAAA,EAAAA,KAAA,UAAQU,MAAO,GAAGR,SAAC,cACnBF,EAAAA,EAAAA,KAAA,UAAQU,MAAO,GAAGR,SAAC,mBACnBF,EAAAA,EAAAA,KAAA,UAAQU,MAAO,GAAGR,SAAC,4BACnBF,EAAAA,EAAAA,KAAA,UAAQU,MAAO,IAAIR,SAAC,yBAGxBC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,aAAYC,SAAA,EACzBF,EAAAA,EAAAA,KAAA,SAAOC,UAAU,aAAYC,SAAC,qCAC9BF,EAAAA,EAAAA,KAAA,OAAKC,UAAS,sBAAAnB,OAAyB4L,EAA0B,GAAZ,WAAiBxK,SACnEwK,EAAW,GAAA5L,OAAMuL,EAAapC,QAAQ,GAAE,gBAAO,8CAMxD9H,EAAAA,EAAAA,MAAA,OAAKF,UAAU,eAAcC,SAAA,EAC3BF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,gBAAeC,SAAC,+BAC9BF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,aAAYC,UACzBF,EAAAA,EAAAA,KAAA,YACErD,GAAG,QACH+D,MAAOsB,EACPrB,SAAWN,GAAMiJ,EAASjJ,EAAEO,OAAOF,OACnCG,YAAY,mIACZZ,UAAU,gBACV6K,KAAM,UAKZ9K,EAAAA,EAAAA,KAAA,OAAKC,UAAU,eAAcC,UAC3BF,EAAAA,EAAAA,KAAA,UACES,KAAK,SACLR,UAAS,cAAAnB,OAAiB4L,EAA2B,GAAb,YACxC3J,SAAUvB,IAAckL,EAAYxK,SAEnCV,GACCW,EAAAA,EAAAA,MAAAc,EAAAA,SAAA,CAAAf,SAAA,EACEF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,eAAcC,SAAC,WAAQ,6BAIzCC,EAAAA,EAAAA,MAAAc,EAAAA,SAAA,CAAAf,SAAA,EACEF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,cAAaC,SAAC,iBAC7BqJ,EAAiB,2BAAS,qCAQpCE,EAAME,OACLxJ,EAAAA,EAAAA,MAAA,OAAKF,UAAS,cAAAnB,OAAgB2K,EAAMhJ,MAAOP,SAAA,EACzCF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,aAAYC,SACV,YAAfuJ,EAAMhJ,KAAqB,SAAM,YAEpCT,EAAAA,EAAAA,KAAA,QAAMC,UAAU,gBAAeC,SAAEuJ,EAAMG,iBCxHjD,EAvJ0BmB,KACxB,MAAOhN,EAAiBiN,IAAsB3L,EAAAA,EAAAA,WAAS,IAChD+H,EAAa6D,IAAkB5L,EAAAA,EAAAA,UAAgD,OAC/E6L,EAAaC,IAAkB9L,EAAAA,EAAAA,UAAuB,cACtDG,EAAWC,IAAgBJ,EAAAA,EAAAA,WAAS,IAE3CO,EAAAA,EAAAA,WAAU,KAEUwL,MAChB,MAAMC,EAAapP,EAAgB8B,kBAC7BrB,EAAOT,EAAgBgC,iBAE7B+M,EAAmBK,GACnBJ,EAAevO,GACf+C,GAAa,IAGf2L,GAGA,MAAME,EAAWC,YAAY,KAC3B,MAAMF,EAAapP,EAAgB8B,kBAC7BrB,EAAOT,EAAgBgC,iBAEzBoN,IAAetN,IACjBiN,EAAmBK,GACnBJ,EAAevO,KAEhB,KAEH,MAAO,IAAM8O,cAAcF,IAC1B,CAACvN,IAEJ,MAAM0N,EAAqBA,KACzB,MAAM/O,EAAOT,EAAgBgC,iBAC7B+M,GAAmB,GACnBC,EAAevO,IAyBjB,OAAI8C,GAEAQ,EAAAA,EAAAA,KAAA,OAAKC,UAAU,mBAAkBC,UAC/BC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,kBAAiBC,SAAA,EAC9BF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,eAAcC,SAAC,kBAC9BF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,eAAcC,SAAC,yFAOjCnC,GAAoBqJ,GAMvBjH,EAAAA,EAAAA,MAAA,OAAKF,UAAU,WAAUC,SAAA,EAEvBC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,WAAUC,SAAA,EACvBF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,aAAYC,UACzBC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,QAAOC,SAAA,EACpBF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,aAAYC,SAAC,YAC5BC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,gBAAeC,SAAA,EAC5BF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,cAAaC,SAAC,2CAC5BF,EAAAA,EAAAA,KAAA,KAAGC,UAAU,iBAAgBC,SAAC,+BAKpCF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,WAAUC,UACvBC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,eAAcC,SAAA,EAC3BF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,aAAYC,SAAC,+BAC5BC,EAAAA,EAAAA,MAAA,UACEF,UAAS,YAAAnB,OAA8B,cAAhBoM,EAA8B,SAAW,IAChE/J,QAASA,IAAMgK,EAAe,aAAajL,SAAA,EAE3CF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,WAAUC,SAAC,kBAC3BF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,WAAUC,SAAC,iCAE7BC,EAAAA,EAAAA,MAAA,UACEF,UAAS,YAAAnB,OAA8B,UAAhBoM,EAA0B,SAAW,IAC5D/J,QAASA,IAAMgK,EAAe,SAASjL,SAAA,EAEvCF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,WAAUC,SAAC,YAC3BF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,WAAUC,SAAC,mDAKjCC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,aAAYC,SAAA,EAEzBC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,YAAWC,SAAA,EACxBC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,eAAcC,SAAA,EAC3BF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,cAAaC,SAAC,kBAC7BC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,YAAWC,SAAA,EACxBF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,YAAWC,SAAEkH,EAAYxK,QACzCoD,EAAAA,EAAAA,KAAA,QAAMC,UAAU,aAAYC,SAAEkH,EAAYjL,SAC1CgE,EAAAA,EAAAA,MAAA,QAAMF,UAAU,aAAYC,SAAA,CAAC,uBACrB,IAAI/C,KAAKiK,EAAYlK,WAAWwO,eAAe,QAAS,CAC5D9C,MAAO,UACPV,IAAK,UACLyD,KAAM,UACNC,OAAQ,sBAKhB5L,EAAAA,EAAAA,KAAA,UAAQC,UAAU,aAAakB,QA3FpB0K,KACGC,OAAOC,QAAQ,gFAEnC9P,EAAgB4B,SAChBmN,GAAmB,GACnBC,EAAe,MACfE,EAAe,eAqF6Ca,MAAM,2BAAM9L,SAAC,qBAMrEC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,eAAcC,SAAA,EAC3BF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,eAAcC,SAAC,YAC/BF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,UAASC,SAAC,gCAMhCF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,YAAWC,SA/FL+L,MACxB,OAAQf,GACN,IAAK,YAIL,QACE,OAAOlL,EAAAA,EAAAA,KAACuG,EAAa,IAHvB,IAAK,QACH,OAAOvG,EAAAA,EAAAA,KAACkJ,EAAa,MA2FpB+C,SAvEEjM,EAAAA,EAAAA,KAACkM,EAAS,CAAC/M,eAAgBsM,I,oEC/E/B,MAAMpP,EAGX,wBAAakC,GACX,IACE,MAAM,KAAErE,EAAI,MAAEsC,SAAgB2P,EAAAA,EAC3BzR,KAAKS,KAAKiR,WACVC,OAAO,KACPC,MAAM,aAAc,CAAEC,WAAW,IAEpC,GAAI/P,EAAO,MAAMA,EACjB,OAAOtC,GAAQ,EACjB,CAAE,MAAOsC,GAEP,OADAoB,QAAQpB,MAAM,2BAA4BA,GACnC,EACT,CACF,CAEA,wBAAa6J,CAAY1J,GACvB,IACE,MAAM,KAAEzC,EAAI,MAAEsC,SAAgB2P,EAAAA,EAC3BzR,KAAKS,KAAKiR,WACVC,OAAO,KACPG,GAAG,KAAM7P,GACT8P,SAEH,GAAIjQ,EAAO,MAAMA,EACjB,OAAOtC,CACT,CAAE,MAAOsC,GAEP,OADAoB,QAAQpB,MAAM,4BAA6BA,GACpC,IACT,CACF,CAEA,uBAAakQ,CAAWhQ,GAAqG,IAADiQ,EAAA,IACtHC,EAAe,KACfC,EAAe,KACfC,GAAiB,KAH6EC,UAAAjR,OAAA,QAAA6O,IAAAoC,UAAA,KAAAA,UAAA,MAMhGF,EAAe9S,EAAAA,EAAcqB,uBAC7BwR,QAAqB7S,EAAAA,EAAcC,aAAa6S,GAChDC,GAAiB,GAGnB,MAAME,GAAQ9O,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACTxB,GAAI,IACP+B,cAAemO,EACfK,cAAeJ,EACflO,iBAAkBmO,EAClBrQ,UAAyB,QAAhBkQ,EAAEjQ,EAAKD,iBAAS,IAAAkQ,GAAAA,EACzBO,YAAaxQ,EAAKwQ,aAAe,EACjCC,eAAgBzQ,EAAKyQ,gBAAkB,EACvCC,YAAa1Q,EAAK0Q,aAAe,WAGnC,IACE,MAAM,KAAElT,EAAI,MAAEsC,SAAgB2P,EAAAA,EAC3BzR,KAAKS,KAAKiR,WACViB,OAAOL,GACPX,SACAI,SAEH,GAAIjQ,EAAO,CACT,GAAmB,UAAfA,EAAM8Q,KACR,MAAM,IAAIC,MAAM,+EAElB,MAAM/Q,CACR,CAGA,OADY0B,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAQhE,GAAI,IAAE+S,cAAeJ,GAE3C,CAAE,MAAOrQ,GAEP,MADAoB,QAAQpB,MAAM,uBAAwBA,GAChCA,CACR,CACF,CAEA,uBAAagR,CAAW7Q,EAAY8Q,GAClC,IACE,MAAM,KAAEvT,EAAI,MAAEsC,SAAgB2P,EAAAA,EAC3BzR,KAAKS,KAAKiR,WACVsB,OAAOD,GACPjB,GAAG,KAAM7P,GACT0P,SACAI,SAEH,GAAIjQ,EAAO,MAAMA,EACjB,OAAOtC,CACT,CAAE,MAAOsC,GAEP,MADAoB,QAAQpB,MAAM,uBAAwBA,GAChCA,CACR,CACF,CAEA,uBAAamR,CAAWhR,GACtB,IACE,MAAM,MAAEH,SAAgB2P,EAAAA,EACrBzR,KAAKS,KAAKiR,WACVwB,SACApB,GAAG,KAAM7P,GAEZ,GAAIH,EAAO,MAAMA,EACjB,OAAO,CACT,CAAE,MAAOA,GAEP,OADAoB,QAAQpB,MAAM,uBAAwBA,IAC/B,CACT,CACF,CAEA,wCAAaqR,GACX,IACE,MAAMC,EAAmB3S,KAAK4S,uBACtB7T,KAAM6F,EAAK,MAAEvD,SAAgB2P,EAAAA,EAClCzR,KAAKS,KAAKiR,WACVC,OAAO,KACPG,GAAG,aAAa,GAEnB,GAAIhQ,EAAO,MAAMA,EACjB,MAAMwR,EAAwC,GAE9C,IAAK,MAAMtR,KAAQqD,GAAS,GAAI,CAC9B,MAAMkO,EAAmBvR,GAGjBxC,KAAMgU,SAAoB/B,EAAAA,EAC/BzR,KAAK,kBACL2R,OAAO,KACPG,GAAG,UAAW9P,EAAKC,IACnB6P,GAAG,kBAAmBsB,GAEzB,GAAII,GAAaA,EAAUpS,OAAS,EAAG,CACrC,MAAMqS,EAAWD,EAAU,GAC3BD,EAAiBG,iBAAmB,CAClCC,QAAS3R,EAAKC,GACd2R,gBAAiBR,EACjBS,aAAcJ,EAASI,aACvBC,WAAYL,EAASK,WACrBC,cAAeN,EAASM,cACxBC,YAAaP,EAASO,YACtBC,gBAAiBR,EAASQ,gBAC1BC,cAAeT,EAASS,cACxBC,eAAgBV,EAASU,eACzBC,aAAcX,EAASW,aACvBC,aAAcZ,EAASY,aACvBC,WAAYb,EAASa,WACrBC,eAAgBd,EAASc,eACzBC,aAAcf,EAASe,aACvBC,aAAchB,EAASgB,aACvBC,WAAYjB,EAASiB,WAEzB,CAGA,MAAMC,QAAoBlU,KAAKmU,mBAAmB5S,EAAKC,GAAKmR,GAC5DG,EAAiBsB,sBAAwBF,EAAYG,YACrDvB,EAAiBwB,oBAAsBJ,EAAYK,UAEnD1B,EAAkBjS,KAAKkS,EACzB,CAEA,OAAOD,EAAkBjL,KAAK,CAACC,EAAGnI,IAAMmI,EAAEnG,UAAU8S,cAAc9U,EAAEgC,WACtE,CAAE,MAAOL,GAEP,OADAoB,QAAQpB,MAAM,6CAA8CA,GACrD,EACT,CACF,CAEA,0BAAeuR,GACb,MAAM3J,EAAQ,IAAIjH,KACZyS,EAAYxL,EAAMZ,SAClBqM,EAAOzL,EAAMb,UAAYqM,GAA2B,IAAdA,GAAmB,EAAI,GAEnE,OADe,IAAIzS,KAAKiH,EAAMd,QAAQuM,IACxBvL,cAAcC,MAAM,KAAK,EACzC,CAEA,+BAAqB+K,CAAmB1Q,EAAgBkR,GACtD,IACE,MAAMC,EAAU,IAAI5S,KAAK2S,GACzBC,EAAQzM,QAAQyM,EAAQxM,UAAY,GACpC,MAAMyM,EAAaD,EAAQzL,cAAcC,MAAM,KAAK,IAE5CrK,KAAM+V,SAAsB9D,EAAAA,EACjCzR,KAAK,gBACL2R,OAAO,KACPG,GAAG,UAAW5N,GACdsR,IAAI,YAAaJ,GACjBK,IAAI,YAAaH,GAEd1N,GAAc2N,GAAe,IAAIpM,OAAO,CAACC,EAAKzB,IAAWyB,GAAOzB,EAAOmN,aAAe,GAAI,GAGhG,MAAO,CAAEA,YAAalN,EAAYoN,WAFhBO,GAAe,IAAIpM,OAAO,CAACC,EAAKzB,IAAWyB,GAAOzB,EAAOqN,WAAa,GAAI,GAG9F,CAAE,MAAOlT,GAEP,OADAoB,QAAQpB,MAAM,mCAAoCA,GAC3C,CAAEgT,YAAa,EAAGE,UAAW,EACtC,CACF,CAGA,2BAAaU,CAAejU,GAC1B,IACE,MAAM,KAAEjC,EAAI,MAAEsC,SAAgB2P,EAAAA,EAC3BzR,KAAKS,KAAKiR,WACVC,OAAO,KACPG,GAAG,QAASrQ,GACZqQ,GAAG,aAAa,GAChBC,SAEH,GAAIjQ,EAAO,MAAMA,EACjB,OAAOtC,CACT,CAAE,MAAOsC,GAEP,OADAoB,QAAQpB,MAAM,+BAAgCA,GACvC,IACT,CACF,CAEA,6BAAaF,CAAiBH,EAAelC,GAC3C,MAAMyC,QAAavB,KAAKiV,eAAejU,GACvC,IAAKO,IAASA,EAAK+B,cAAe,OAAO,KAGzC,aADsB1E,EAAAA,EAAckB,eAAehB,EAAUyC,EAAK+B,sBAI5DtD,KAAKkV,gBAAgB3T,EAAKC,IAEzBD,GALc,IAMvB,CAEA,4BAAa2T,CAAgBzR,GAC3B,IACE,MAAM,MAAEpC,SAAgB2P,EAAAA,EACrBzR,KAAKS,KAAKiR,WACVsB,OAAO,CAAE4C,YAAY,IAAInT,MAAOmH,gBAChCkI,GAAG,KAAM5N,GAEZ,GAAIpC,EAAO,MAAMA,CACnB,CAAE,MAAOA,GACPoB,QAAQpB,MAAM,6BAA8BA,EAC9C,CACF,CAEA,0BAAa+T,CAAc3R,GACzB,MAAM4R,EAAezW,EAAAA,EAAcqB,uBAC7BwR,QAAqB7S,EAAAA,EAAcC,aAAawW,GAEtD,IACE,MAAM,MAAEhU,SAAgB2P,EAAAA,EACrBzR,KAAKS,KAAKiR,WACVsB,OAAO,CACNjP,cAAemO,EACfK,cAAeuD,EACf7R,kBAAkB,IAEnB6N,GAAG,KAAM5N,GAEZ,GAAIpC,EAAO,MAAMA,EACjB,OAAOgU,CACT,CAAE,MAAOhU,GAEP,MADAoB,QAAQpB,MAAM,4BAA6BA,GACrCA,CACR,CACF,CAEA,2BAAa8J,CAAe1H,EAAgBmH,GAC1C,MAAMK,EAAarM,EAAAA,EAAc6B,iBAAiBmK,GAClD,IAAKK,EAAWpK,MACd,MAAM,IAAIuR,MAAMnH,EAAWvK,OAAOb,KAAK,OAGzC,MAAM4R,QAAqB7S,EAAAA,EAAcC,aAAa+L,GAEtD,IACE,MAAM,MAAEvJ,SAAgB2P,EAAAA,EACrBzR,KAAKS,KAAKiR,WACVsB,OAAO,CACNjP,cAAemO,EACfK,cAAe,KACftO,kBAAkB,IAEnB6N,GAAG,KAAM5N,GAEZ,GAAIpC,EAAO,MAAMA,EACjB,OAAO,CACT,CAAE,MAAOA,GAEP,MADAoB,QAAQpB,MAAM,2BAA4BA,GACpCA,CACR,CACF,CAEA,kCAAaiU,CAAsB7R,EAAgB8R,GACjD,IACE,GAAIA,EAAW,CAEb,MAAMF,EAAezW,EAAAA,EAAcqB,uBAC7BwR,QAAqB7S,EAAAA,EAAcC,aAAawW,IAEhD,MAAEhU,SAAgB2P,EAAAA,EACrBzR,KAAKS,KAAKiR,WACVsB,OAAO,CACNjP,cAAemO,EACfK,cAAeuD,EACf7R,kBAAkB,IAEnB6N,GAAG,KAAM5N,GAEZ,GAAIpC,EAAO,MAAMA,CACnB,KAAO,CAEL,MAAM,MAAEA,SAAgB2P,EAAAA,EACrBzR,KAAKS,KAAKiR,WACVsB,OAAO,CACNjP,cAAe,KACfwO,cAAe,KACftO,kBAAkB,IAEnB6N,GAAG,KAAM5N,GAEZ,GAAIpC,EAAO,MAAMA,CACnB,CACF,CAAE,MAAOA,GAEP,MADAoB,QAAQpB,MAAM,oCAAqCA,GAC7CA,CACR,CACF,EArUWH,EACI+P,UAAY,O","sources":["utils/passwordUtils.ts","services/userAuthService.ts","components/UserLogin.tsx","services/workTimeService.ts","components/PasswordChangeModal.tsx","components/WorkDashboard.tsx","components/WorkTimeInput.tsx","components/UserApp.tsx","services/userService.ts"],"sourcesContent":["// 클라이언트 사이드에서 간단한 해싱 (실제 운영에서는 서버에서 처리해야 함)\nexport class PasswordUtils {\n\n  // 간단한 해시 함수 (실제로는 bcrypt 등을 서버에서 사용해야 함)\n  static async hashPassword(password: string): Promise<string> {\n    const encoder = new TextEncoder();\n    const data = encoder.encode(password + 'salt_for_store_system');\n    const hashBuffer = await crypto.subtle.digest('SHA-256', data);\n    const hashArray = Array.from(new Uint8Array(hashBuffer));\n    return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');\n  }\n\n  // 비밀번호 검증\n  static async verifyPassword(password: string, hash: string): Promise<boolean> {\n    const hashedInput = await this.hashPassword(password);\n    return hashedInput === hash;\n  }\n\n  // 임시 비밀번호 생성\n  static generateTempPassword(): string {\n    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n    let result = '';\n    for (let i = 0; i < 8; i++) {\n      result += chars.charAt(Math.floor(Math.random() * chars.length));\n    }\n    return result;\n  }\n\n  // 비밀번호 강도 검사\n  static validatePassword(password: string): { valid: boolean; errors: string[] } {\n    const errors: string[] = [];\n\n    if (password.length < 4) {\n      errors.push('비밀번호는 최소 4자리 이상이어야 합니다.');\n    }\n\n    if (password.length > 20) {\n      errors.push('비밀번호는 20자리를 초과할 수 없습니다.');\n    }\n\n    return {\n      valid: errors.length === 0,\n      errors\n    };\n  }\n}","import { UserService } from './userService';\n\nexport interface User {\n  id: string;\n  name: string;\n  email: string;\n  role: 'employee';\n}\n\nexport class UserAuthService {\n  private static readonly USER_SESSION_KEY = 'user_auth_session';\n  private static readonly SESSION_DURATION = 8 * 60 * 60 * 1000; // 8시간\n\n  /**\n   * 일반 사용자 로그인\n   */\n  static async login(email: string, password: string): Promise<{ success: boolean; user?: User; error?: string }> {\n    try {\n      const dbUser = await UserService.authenticateUser(email, password);\n\n      if (!dbUser) {\n        return { success: false, error: '이메일 또는 비밀번호가 올바르지 않습니다.' };\n      }\n\n      if (!dbUser.is_active) {\n        return { success: false, error: '비활성화된 계정입니다. 관리자에게 문의하세요.' };\n      }\n\n      const user: User = {\n        id: dbUser.id!.toString(),\n        name: dbUser.full_name,\n        email: dbUser.email,\n        role: 'employee'\n      };\n\n      const token = this.generateToken(user.id);\n      const sessionData = {\n        token,\n        user,\n        loginTime: Date.now(),\n        expiryTime: Date.now() + this.SESSION_DURATION\n      };\n\n      localStorage.setItem(this.USER_SESSION_KEY, JSON.stringify(sessionData));\n      return { success: true, user };\n    } catch (error) {\n      console.error('Login error:', error);\n      return { success: false, error: '로그인 중 오류가 발생했습니다.' };\n    }\n  }\n\n  /**\n   * 로그아웃\n   */\n  static logout(): void {\n    localStorage.removeItem(this.USER_SESSION_KEY);\n  }\n\n  /**\n   * 현재 로그인 상태 확인\n   */\n  static isAuthenticated(): boolean {\n    const sessionData = this.getSessionData();\n    if (!sessionData) return false;\n\n    // 세션 만료 확인\n    if (Date.now() > sessionData.expiryTime) {\n      this.logout();\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * 현재 사용자 정보 반환\n   */\n  static getCurrentUser(): (User & { loginTime: number }) | null {\n    const sessionData = this.getSessionData();\n    if (!sessionData || !this.isAuthenticated()) return null;\n\n    return {\n      ...sessionData.user,\n      loginTime: sessionData.loginTime\n    };\n  }\n\n  /**\n   * 세션 연장\n   */\n  static extendSession(): void {\n    const sessionData = this.getSessionData();\n    if (sessionData && this.isAuthenticated()) {\n      sessionData.expiryTime = Date.now() + this.SESSION_DURATION;\n      localStorage.setItem(this.USER_SESSION_KEY, JSON.stringify(sessionData));\n    }\n  }\n\n  /**\n   * 세션 만료까지 남은 시간 (밀리초)\n   */\n  static getTimeUntilExpiry(): number {\n    const sessionData = this.getSessionData();\n    if (!sessionData) return 0;\n\n    return Math.max(0, sessionData.expiryTime - Date.now());\n  }\n\n  /**\n   * 로그인 가능한 사용자 목록 조회 (개발/테스트용)\n   */\n  static async getLoginEnabledUsers(): Promise<Array<{ email: string; name: string; hasTemp: boolean }>> {\n    try {\n      const allUsers = await UserService.getAllUsers();\n      return allUsers\n        .filter(user => user.password_hash && user.is_active)\n        .map(user => ({\n          email: user.email,\n          name: user.full_name,\n          hasTemp: !!user.is_password_temp\n        }));\n    } catch (error) {\n      console.error('Error getting login enabled users:', error);\n      return [];\n    }\n  }\n\n  /**\n   * 토큰 생성\n   */\n  private static generateToken(userId: string): string {\n    return btoa(`${userId}:${Date.now()}:${Math.random()}`);\n  }\n\n  /**\n   * 세션 데이터 가져오기\n   */\n  private static getSessionData(): {\n    token: string;\n    user: User;\n    loginTime: number;\n    expiryTime: number;\n  } | null {\n    try {\n      const data = localStorage.getItem(this.USER_SESSION_KEY);\n      return data ? JSON.parse(data) : null;\n    } catch {\n      return null;\n    }\n  }\n}","import React, { useState, useEffect } from 'react';\nimport { UserAuthService } from '../services/userAuthService';\nimport '../styles/components/UserLogin.css';\n\ninterface UserLoginProps {\n  onLoginSuccess: () => void;\n}\n\nconst UserLogin: React.FC<UserLoginProps> = ({ onLoginSuccess }) => {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [error, setError] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [availableUsers, setAvailableUsers] = useState<Array<{ email: string; name: string; hasTemp: boolean }>>([]);\n\n  useEffect(() => {\n    loadAvailableUsers();\n  }, []);\n\n  const loadAvailableUsers = async () => {\n    try {\n      const users = await UserAuthService.getLoginEnabledUsers();\n      setAvailableUsers(users);\n    } catch (error) {\n      console.error('Error loading available users:', error);\n    }\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setError('');\n    setIsLoading(true);\n\n    try {\n      const result = await UserAuthService.login(email, password);\n\n      if (result.success) {\n        onLoginSuccess();\n      } else {\n        setError(result.error || '로그인에 실패했습니다.');\n        setPassword(''); // 실패시 비밀번호 필드 초기화\n      }\n    } catch (err) {\n      setError('로그인 중 오류가 발생했습니다.');\n      console.error('Login error:', err);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleEmailChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setEmail(e.target.value);\n    if (error) setError(''); // 입력시 에러 메시지 제거\n  };\n\n  const handlePasswordChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setPassword(e.target.value);\n    if (error) setError(''); // 입력시 에러 메시지 제거\n  };\n\n  const quickLogin = (userEmail: string, isTemp: boolean) => {\n    setEmail(userEmail);\n    if (isTemp) {\n      // 임시 비밀번호 사용자의 경우 비밀번호를 안내\n      alert('이 사용자는 임시 비밀번호를 사용합니다.\\n관리자에게 임시 비밀번호를 확인하세요.');\n      setPassword('');\n    } else {\n      setPassword('');\n    }\n    setError('');\n  };\n\n  return (\n    <div className=\"user-login-container\">\n      <div className=\"user-login-background\">\n        <div className=\"user-login-card\">\n          <div className=\"user-login-header\">\n            <div className=\"user-login-icon\">👨‍💼</div>\n            <h1>직원 로그인</h1>\n            <p>근무시간 관리 시스템</p>\n          </div>\n\n          <form onSubmit={handleSubmit} className=\"user-login-form\">\n            <div className=\"user-form-group\">\n              <label htmlFor=\"email\" className=\"user-form-label\">\n                이메일\n              </label>\n              <div className=\"user-input-wrapper\">\n                <span className=\"user-input-icon\">📧</span>\n                <input\n                  id=\"email\"\n                  type=\"email\"\n                  value={email}\n                  onChange={handleEmailChange}\n                  placeholder=\"이메일을 입력하세요\"\n                  className=\"user-form-input\"\n                  required\n                  disabled={isLoading}\n                />\n              </div>\n            </div>\n\n            <div className=\"user-form-group\">\n              <label htmlFor=\"password\" className=\"user-form-label\">\n                비밀번호\n              </label>\n              <div className=\"user-input-wrapper\">\n                <span className=\"user-input-icon\">🔒</span>\n                <input\n                  id=\"password\"\n                  type=\"password\"\n                  value={password}\n                  onChange={handlePasswordChange}\n                  placeholder=\"비밀번호를 입력하세요\"\n                  className=\"user-form-input\"\n                  required\n                  disabled={isLoading}\n                />\n              </div>\n            </div>\n\n            {error && (\n              <div className=\"user-error-message\">\n                <span className=\"user-error-icon\">⚠️</span>\n                {error}\n              </div>\n            )}\n\n            <button\n              type=\"submit\"\n              className={`user-login-button ${isLoading ? 'loading' : ''}`}\n              disabled={isLoading || !email.trim() || !password.trim()}\n            >\n              {isLoading ? (\n                <>\n                  <span className=\"user-loading-spinner\">⟳</span>\n                  로그인 중...\n                </>\n              ) : (\n                <>\n                  <span className=\"user-login-button-icon\">🚀</span>\n                  로그인\n                </>\n              )}\n            </button>\n          </form>\n\n          {/* Quick Login Demo */}\n          {availableUsers.length > 0 && (\n            <div className=\"quick-login-section\">\n              <div className=\"quick-login-header\">\n                <span className=\"quick-login-icon\">⚡</span>\n                <span>빠른 로그인 (등록된 직원)</span>\n              </div>\n              <div className=\"quick-login-buttons\">\n                {availableUsers.slice(0, 4).map((user) => (\n                  <button\n                    key={user.email}\n                    type=\"button\"\n                    className={`quick-login-btn ${user.hasTemp ? 'temp-password' : ''}`}\n                    onClick={() => quickLogin(user.email, user.hasTemp)}\n                    disabled={isLoading}\n                  >\n                    {user.name}\n                    {user.hasTemp && <span className=\"temp-badge\">임시</span>}\n                  </button>\n                ))}\n              </div>\n              <div className=\"demo-info\">\n                <span className=\"demo-icon\">💡</span>\n                <span>\n                  {availableUsers.some(u => u.hasTemp)\n                    ? '임시 비밀번호가 있는 계정은 관리자에게 문의하세요'\n                    : '관리자가 등록한 직원 계정들입니다'\n                  }\n                </span>\n              </div>\n            </div>\n          )}\n\n          <div className=\"user-login-footer\">\n            <div className=\"user-security-info\">\n              <span className=\"user-security-icon\">🛡️</span>\n              <span>안전한 근무시간 기록 시스템</span>\n            </div>\n          </div>\n        </div>\n\n        {/* Background Animation Elements */}\n        <div className=\"user-bg-animation\">\n          <div className=\"user-floating-shape shape-1\">⏰</div>\n          <div className=\"user-floating-shape shape-2\">📅</div>\n          <div className=\"user-floating-shape shape-3\">👥</div>\n          <div className=\"user-floating-shape shape-4\">💼</div>\n          <div className=\"user-floating-shape shape-5\">📊</div>\n          <div className=\"user-floating-shape shape-6\">🏢</div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default UserLogin;","export interface WorkTime {\n  id: string;\n  userId: string;\n  date: string; // YYYY-MM-DD 형식\n  startTime: string; // HH:MM 형식\n  endTime: string; // HH:MM 형식\n  breakTime: number; // 분 단위\n  totalHours: number; // 실제 근무시간 (시간 단위)\n  notes?: string;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface WorkSummary {\n  totalDays: number;\n  totalHours: number;\n  averageHours: number;\n  thisWeekHours: number;\n  thisMonthHours: number;\n}\n\nexport class WorkTimeService {\n  private static readonly STORAGE_KEY = 'work_time_records';\n\n  /**\n   * 근무시간 등록\n   */\n  static addWorkTime(\n    userId: string,\n    date: string,\n    startTime: string,\n    endTime: string,\n    breakTime: number,\n    notes?: string\n  ): WorkTime {\n    const records = this.getAllRecords();\n\n    // 같은 날짜의 기존 기록이 있는지 확인\n    const existingIndex = records.findIndex(\n      record => record.userId === userId && record.date === date\n    );\n\n    const totalHours = this.calculateWorkHours(startTime, endTime, breakTime);\n\n    const workTime: WorkTime = {\n      id: existingIndex >= 0 ? records[existingIndex].id : this.generateId(),\n      userId,\n      date,\n      startTime,\n      endTime,\n      breakTime,\n      totalHours,\n      notes,\n      createdAt: existingIndex >= 0 ? records[existingIndex].createdAt : new Date(),\n      updatedAt: new Date()\n    };\n\n    if (existingIndex >= 0) {\n      // 기존 기록 업데이트\n      records[existingIndex] = workTime;\n    } else {\n      // 새 기록 추가\n      records.push(workTime);\n    }\n\n    this.saveRecords(records);\n    return workTime;\n  }\n\n  /**\n   * 사용자의 근무시간 기록 조회\n   */\n  static getUserWorkTimes(userId: string, limit?: number): WorkTime[] {\n    const records = this.getAllRecords()\n      .filter(record => record.userId === userId)\n      .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n\n    return limit ? records.slice(0, limit) : records;\n  }\n\n  /**\n   * 특정 날짜의 근무시간 조회\n   */\n  static getWorkTimeByDate(userId: string, date: string): WorkTime | null {\n    const records = this.getAllRecords();\n    return records.find(record => record.userId === userId && record.date === date) || null;\n  }\n\n  /**\n   * 근무시간 통계 조회\n   */\n  static getWorkSummary(userId: string): WorkSummary {\n    const records = this.getUserWorkTimes(userId);\n    const now = new Date();\n\n    // 이번 주 시작일 (일요일)\n    const startOfWeek = new Date(now);\n    startOfWeek.setDate(now.getDate() - now.getDay());\n    startOfWeek.setHours(0, 0, 0, 0);\n\n    // 이번 달 시작일\n    const startOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);\n\n    const totalHours = records.reduce((sum, record) => sum + record.totalHours, 0);\n    const thisWeekHours = records\n      .filter(record => new Date(record.date) >= startOfWeek)\n      .reduce((sum, record) => sum + record.totalHours, 0);\n\n    const thisMonthHours = records\n      .filter(record => new Date(record.date) >= startOfMonth)\n      .reduce((sum, record) => sum + record.totalHours, 0);\n\n    return {\n      totalDays: records.length,\n      totalHours,\n      averageHours: records.length > 0 ? totalHours / records.length : 0,\n      thisWeekHours,\n      thisMonthHours\n    };\n  }\n\n  /**\n   * 최근 7일간의 근무시간 데이터 (차트용)\n   */\n  static getWeeklyData(userId: string): Array<{ date: string; hours: number; dayName: string }> {\n    const records = this.getUserWorkTimes(userId);\n    const result = [];\n    const today = new Date();\n\n    for (let i = 6; i >= 0; i--) {\n      const date = new Date(today);\n      date.setDate(today.getDate() - i);\n      const dateString = date.toISOString().split('T')[0];\n\n      const record = records.find(r => r.date === dateString);\n      const dayNames = ['일', '월', '화', '수', '목', '금', '토'];\n\n      result.push({\n        date: dateString,\n        hours: record ? record.totalHours : 0,\n        dayName: dayNames[date.getDay()]\n      });\n    }\n\n    return result;\n  }\n\n  /**\n   * 근무시간 삭제\n   */\n  static deleteWorkTime(userId: string, workTimeId: string): boolean {\n    const records = this.getAllRecords();\n    const index = records.findIndex(\n      record => record.id === workTimeId && record.userId === userId\n    );\n\n    if (index >= 0) {\n      records.splice(index, 1);\n      this.saveRecords(records);\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * 근무시간 계산 (시간 단위)\n   */\n  private static calculateWorkHours(startTime: string, endTime: string, breakTime: number): number {\n    const [startHour, startMin] = startTime.split(':').map(Number);\n    const [endHour, endMin] = endTime.split(':').map(Number);\n\n    const startMinutes = startHour * 60 + startMin;\n    let endMinutes = endHour * 60 + endMin;\n\n    // 다음날 근무인 경우 (예: 22:00 ~ 06:00)\n    if (endMinutes < startMinutes) {\n      endMinutes += 24 * 60;\n    }\n\n    const totalMinutes = endMinutes - startMinutes - breakTime;\n    return Math.max(0, totalMinutes / 60); // 시간 단위로 변환\n  }\n\n  /**\n   * 모든 기록 조회\n   */\n  private static getAllRecords(): WorkTime[] {\n    try {\n      const data = localStorage.getItem(this.STORAGE_KEY);\n      return data ? JSON.parse(data) : [];\n    } catch {\n      return [];\n    }\n  }\n\n  /**\n   * 기록 저장\n   */\n  private static saveRecords(records: WorkTime[]): void {\n    localStorage.setItem(this.STORAGE_KEY, JSON.stringify(records));\n  }\n\n  /**\n   * ID 생성\n   */\n  private static generateId(): string {\n    return Date.now().toString(36) + Math.random().toString(36).substr(2);\n  }\n}","import React, { useState } from 'react';\nimport { UserService } from '../services/userService';\nimport { PasswordUtils } from '../utils/passwordUtils';\n\ninterface PasswordChangeModalProps {\n  isOpen: boolean;\n  userId: string;\n  onClose: () => void;\n  onSuccess: () => void;\n}\n\nconst PasswordChangeModal: React.FC<PasswordChangeModalProps> = ({\n  isOpen,\n  userId,\n  onClose,\n  onSuccess\n}) => {\n  const [currentPassword, setCurrentPassword] = useState('');\n  const [newPassword, setNewPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [error, setError] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setError('');\n\n    // 유효성 검사\n    if (!currentPassword || !newPassword || !confirmPassword) {\n      setError('모든 필드를 입력해주세요.');\n      return;\n    }\n\n    if (newPassword !== confirmPassword) {\n      setError('새 비밀번호가 일치하지 않습니다.');\n      return;\n    }\n\n    if (currentPassword === newPassword) {\n      setError('새 비밀번호는 현재 비밀번호와 달라야 합니다.');\n      return;\n    }\n\n    const validation = PasswordUtils.validatePassword(newPassword);\n    if (!validation.valid) {\n      setError(validation.errors.join(' '));\n      return;\n    }\n\n    setIsLoading(true);\n\n    try {\n      // 현재 비밀번호 확인\n      const user = await UserService.getUserById(userId);\n      if (!user || !user.password_hash) {\n        setError('사용자 정보를 찾을 수 없습니다.');\n        return;\n      }\n\n      const isCurrentValid = await PasswordUtils.verifyPassword(currentPassword, user.password_hash);\n      if (!isCurrentValid) {\n        setError('현재 비밀번호가 올바르지 않습니다.');\n        return;\n      }\n\n      // 비밀번호 변경\n      await UserService.changePassword(userId, newPassword);\n\n      alert('비밀번호가 성공적으로 변경되었습니다.');\n      onSuccess();\n      onClose();\n    } catch (err) {\n      setError('비밀번호 변경 중 오류가 발생했습니다.');\n      console.error('Password change error:', err);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleClose = () => {\n    setCurrentPassword('');\n    setNewPassword('');\n    setConfirmPassword('');\n    setError('');\n    onClose();\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"modal-overlay\">\n      <div className=\"modal-content password-change-modal\">\n        <div className=\"modal-header\">\n          <h2>🔐 비밀번호 변경</h2>\n          <button onClick={handleClose} className=\"modal-close\">×</button>\n        </div>\n\n        <form onSubmit={handleSubmit} className=\"password-change-form\">\n          {error && (\n            <div className=\"error-message\">\n              <span className=\"error-icon\">⚠️</span>\n              {error}\n            </div>\n          )}\n\n          <div className=\"form-group\">\n            <label htmlFor=\"currentPassword\">현재 비밀번호 *</label>\n            <input\n              type=\"password\"\n              id=\"currentPassword\"\n              value={currentPassword}\n              onChange={(e) => setCurrentPassword(e.target.value)}\n              placeholder=\"현재 비밀번호를 입력하세요\"\n              disabled={isLoading}\n            />\n          </div>\n\n          <div className=\"form-group\">\n            <label htmlFor=\"newPassword\">새 비밀번호 *</label>\n            <input\n              type=\"password\"\n              id=\"newPassword\"\n              value={newPassword}\n              onChange={(e) => setNewPassword(e.target.value)}\n              placeholder=\"새 비밀번호를 입력하세요\"\n              disabled={isLoading}\n            />\n            <p className=\"password-help\">\n              최소 4자리 이상, 최대 20자리 이하로 입력해주세요.\n            </p>\n          </div>\n\n          <div className=\"form-group\">\n            <label htmlFor=\"confirmPassword\">새 비밀번호 확인 *</label>\n            <input\n              type=\"password\"\n              id=\"confirmPassword\"\n              value={confirmPassword}\n              onChange={(e) => setConfirmPassword(e.target.value)}\n              placeholder=\"새 비밀번호를 다시 입력하세요\"\n              disabled={isLoading}\n            />\n          </div>\n\n          <div className=\"form-actions\">\n            <button\n              type=\"button\"\n              onClick={handleClose}\n              className=\"secondary-button\"\n              disabled={isLoading}\n            >\n              취소\n            </button>\n            <button\n              type=\"submit\"\n              className=\"primary-button\"\n              disabled={isLoading}\n            >\n              {isLoading ? '변경 중...' : '비밀번호 변경'}\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default PasswordChangeModal;","import React, { useState, useEffect } from 'react';\nimport { WorkTimeService, WorkTime, WorkSummary } from '../services/workTimeService';\nimport { UserAuthService } from '../services/userAuthService';\nimport PasswordChangeModal from './PasswordChangeModal';\nimport '../styles/components/WorkDashboard.css';\n\nconst WorkDashboard: React.FC = () => {\n  const [summary, setSummary] = useState<WorkSummary | null>(null);\n  const [recentWork, setRecentWork] = useState<WorkTime[]>([]);\n  const [weeklyData, setWeeklyData] = useState<Array<{ date: string; hours: number; dayName: string }>>([]);\n  const [selectedDate, setSelectedDate] = useState<string | null>(null);\n  const [selectedWork, setSelectedWork] = useState<WorkTime | null>(null);\n  const [showPasswordModal, setShowPasswordModal] = useState(false);\n\n  const currentUser = UserAuthService.getCurrentUser();\n\n  useEffect(() => {\n    if (currentUser) {\n      loadDashboardData();\n    }\n  }, [currentUser]);\n\n  const loadDashboardData = () => {\n    if (!currentUser) return;\n\n    const summaryData = WorkTimeService.getWorkSummary(currentUser.id);\n    const recentWorkData = WorkTimeService.getUserWorkTimes(currentUser.id, 10);\n    const weeklyChartData = WorkTimeService.getWeeklyData(currentUser.id);\n\n    setSummary(summaryData);\n    setRecentWork(recentWorkData);\n    setWeeklyData(weeklyChartData);\n  };\n\n  const handleDateClick = (date: string) => {\n    if (!currentUser) return;\n\n    const work = WorkTimeService.getWorkTimeByDate(currentUser.id, date);\n    setSelectedDate(date);\n    setSelectedWork(work);\n  };\n\n  const formatTime = (timeString: string): string => {\n    return timeString.substring(0, 5); // HH:MM 형식으로 변환\n  };\n\n  const formatHours = (hours: number): string => {\n    const h = Math.floor(hours);\n    const m = Math.round((hours - h) * 60);\n    return `${h}시간 ${m}분`;\n  };\n\n  const getWorkStatusColor = (hours: number): string => {\n    if (hours === 0) return '#e5e7eb';\n    if (hours < 4) return '#fca5a5';\n    if (hours < 8) return '#fcd34d';\n    return '#34d399';\n  };\n\n  const getWorkStatusText = (hours: number): string => {\n    if (hours === 0) return '미등록';\n    if (hours < 4) return '단시간';\n    if (hours < 8) return '정상';\n    return '장시간';\n  };\n\n  if (!currentUser || !summary) {\n    return (\n      <div className=\"work-dashboard loading\">\n        <div className=\"loading-content\">\n          <div className=\"loading-spinner\">⟳</div>\n          <p>대시보드를 불러오는 중...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"work-dashboard\">\n      {/* Header */}\n      <div className=\"dashboard-header\">\n        <div className=\"header-content\">\n          <div className=\"header-title\">\n            <span className=\"header-icon\">📊</span>\n            <div>\n              <h1>근무 대시보드</h1>\n              <p>{currentUser.name}님의 근무 현황</p>\n            </div>\n          </div>\n          <div className=\"header-actions\">\n            <button onClick={() => setShowPasswordModal(true)} className=\"password-btn\">\n              <span>🔐</span>\n              비밀번호 변경\n            </button>\n            <button onClick={loadDashboardData} className=\"refresh-btn\">\n              <span>🔄</span>\n              새로고침\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* Summary Cards */}\n      <div className=\"summary-grid\">\n        <div className=\"summary-card total\">\n          <div className=\"card-icon\">📅</div>\n          <div className=\"card-content\">\n            <div className=\"card-number\">{summary.totalDays}</div>\n            <div className=\"card-label\">총 근무일</div>\n          </div>\n        </div>\n\n        <div className=\"summary-card hours\">\n          <div className=\"card-icon\">⏰</div>\n          <div className=\"card-content\">\n            <div className=\"card-number\">{summary.totalHours.toFixed(1)}</div>\n            <div className=\"card-label\">총 근무시간</div>\n          </div>\n        </div>\n\n        <div className=\"summary-card average\">\n          <div className=\"card-icon\">📈</div>\n          <div className=\"card-content\">\n            <div className=\"card-number\">{summary.averageHours.toFixed(1)}</div>\n            <div className=\"card-label\">평균 근무시간</div>\n          </div>\n        </div>\n\n        <div className=\"summary-card week\">\n          <div className=\"card-icon\">📆</div>\n          <div className=\"card-content\">\n            <div className=\"card-number\">{summary.thisWeekHours.toFixed(1)}</div>\n            <div className=\"card-label\">이번 주 근무</div>\n          </div>\n        </div>\n      </div>\n\n      {/* Weekly Chart */}\n      <div className=\"chart-section\">\n        <div className=\"chart-header\">\n          <h2>📊 최근 7일 근무시간</h2>\n          <p>일별 근무시간을 확인할 수 있습니다</p>\n        </div>\n\n        <div className=\"weekly-chart\">\n          {weeklyData.map((day, index) => {\n            const maxHours = Math.max(...weeklyData.map(d => d.hours), 8);\n            const height = day.hours > 0 ? Math.max((day.hours / maxHours) * 100, 10) : 5;\n            const color = getWorkStatusColor(day.hours);\n\n            return (\n              <div\n                key={index}\n                className=\"chart-bar\"\n                onClick={() => handleDateClick(day.date)}\n              >\n                <div className=\"bar-container\">\n                  <div\n                    className=\"bar\"\n                    style={{\n                      height: `${height}%`,\n                      backgroundColor: color\n                    }}\n                  >\n                    <div className=\"bar-value\">\n                      {day.hours > 0 ? `${day.hours.toFixed(1)}h` : ''}\n                    </div>\n                  </div>\n                </div>\n                <div className=\"bar-label\">\n                  <div className=\"day-name\">{day.dayName}</div>\n                  <div className=\"date\">{day.date.split('-')[2]}</div>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n\n      {/* Recent Work Records */}\n      <div className=\"recent-work-section\">\n        <div className=\"section-header\">\n          <h2>📋 최근 근무 기록</h2>\n          <p>최근 10일간의 근무 기록입니다</p>\n        </div>\n\n        <div className=\"work-records\">\n          {recentWork.length === 0 ? (\n            <div className=\"empty-state\">\n              <div className=\"empty-icon\">📭</div>\n              <h3>등록된 근무 기록이 없습니다</h3>\n              <p>근무시간을 입력하여 기록을 시작해보세요</p>\n            </div>\n          ) : (\n            recentWork.map((work) => (\n              <div\n                key={work.id}\n                className=\"work-record-card\"\n                onClick={() => {\n                  setSelectedDate(work.date);\n                  setSelectedWork(work);\n                }}\n              >\n                <div className=\"record-header\">\n                  <div className=\"record-date\">\n                    <span className=\"date-icon\">📅</span>\n                    {new Date(work.date).toLocaleDateString('ko-KR', {\n                      month: '2-digit',\n                      day: '2-digit',\n                      weekday: 'short'\n                    })}\n                  </div>\n                  <div className={`work-status ${getWorkStatusText(work.totalHours).toLowerCase()}`}>\n                    {getWorkStatusText(work.totalHours)}\n                  </div>\n                </div>\n\n                <div className=\"record-content\">\n                  <div className=\"time-info\">\n                    <span className=\"time-range\">\n                      {formatTime(work.startTime)} ~ {formatTime(work.endTime)}\n                    </span>\n                    <span className=\"break-time\">\n                      (휴게 {work.breakTime}분)\n                    </span>\n                  </div>\n                  <div className=\"total-hours\">\n                    {formatHours(work.totalHours)}\n                  </div>\n                </div>\n\n                {work.notes && (\n                  <div className=\"record-notes\">\n                    <span className=\"notes-icon\">📝</span>\n                    {work.notes}\n                  </div>\n                )}\n              </div>\n            ))\n          )}\n        </div>\n      </div>\n\n      {/* Work Detail Modal */}\n      {selectedDate && (\n        <div className=\"work-detail-modal\" onClick={() => setSelectedDate(null)}>\n          <div className=\"modal-content\" onClick={(e) => e.stopPropagation()}>\n            <div className=\"modal-header\">\n              <h3>\n                {new Date(selectedDate).toLocaleDateString('ko-KR', {\n                  year: 'numeric',\n                  month: 'long',\n                  day: 'numeric',\n                  weekday: 'long'\n                })} 근무 상세\n              </h3>\n              <button\n                className=\"modal-close\"\n                onClick={() => setSelectedDate(null)}\n              >\n                ×\n              </button>\n            </div>\n\n            <div className=\"modal-body\">\n              {selectedWork ? (\n                <>\n                  <div className=\"detail-section\">\n                    <h4>⏰ 근무 시간</h4>\n                    <div className=\"detail-content\">\n                      <div className=\"time-detail\">\n                        <span className=\"label\">시작:</span>\n                        <span className=\"value\">{formatTime(selectedWork.startTime)}</span>\n                      </div>\n                      <div className=\"time-detail\">\n                        <span className=\"label\">종료:</span>\n                        <span className=\"value\">{formatTime(selectedWork.endTime)}</span>\n                      </div>\n                      <div className=\"time-detail\">\n                        <span className=\"label\">휴게시간:</span>\n                        <span className=\"value\">{selectedWork.breakTime}분</span>\n                      </div>\n                      <div className=\"time-detail total\">\n                        <span className=\"label\">총 근무시간:</span>\n                        <span className=\"value\">{formatHours(selectedWork.totalHours)}</span>\n                      </div>\n                    </div>\n                  </div>\n\n                  {selectedWork.notes && (\n                    <div className=\"detail-section\">\n                      <h4>📝 메모</h4>\n                      <div className=\"detail-content\">\n                        <p className=\"notes-content\">{selectedWork.notes}</p>\n                      </div>\n                    </div>\n                  )}\n\n                  <div className=\"detail-section\">\n                    <h4>📊 상태</h4>\n                    <div className=\"detail-content\">\n                      <div className={`status-badge ${getWorkStatusText(selectedWork.totalHours).toLowerCase()}`}>\n                        {getWorkStatusText(selectedWork.totalHours)}\n                      </div>\n                    </div>\n                  </div>\n                </>\n              ) : (\n                <div className=\"no-work-data\">\n                  <div className=\"no-data-icon\">📭</div>\n                  <h4>해당 날짜에 등록된 근무 기록이 없습니다</h4>\n                  <p>근무시간 입력 페이지에서 기록을 추가해보세요</p>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Password Change Modal */}\n      <PasswordChangeModal\n        isOpen={showPasswordModal}\n        userId={currentUser?.id || '0'}\n        onClose={() => setShowPasswordModal(false)}\n        onSuccess={() => {\n          // 성공 시 필요하면 추가 작업\n        }}\n      />\n    </div>\n  );\n};\n\nexport default WorkDashboard;","import React, { useState, useEffect } from 'react';\nimport { WorkTimeService, WorkTime } from '../services/workTimeService';\nimport { UserAuthService } from '../services/userAuthService';\nimport '../styles/components/WorkTimeInput.css';\n\nconst WorkTimeInput: React.FC = () => {\n  const [date, setDate] = useState(new Date().toISOString().split('T')[0]);\n  const [startTime, setStartTime] = useState('09:00');\n  const [endTime, setEndTime] = useState('18:00');\n  const [breakTime, setBreakTime] = useState(60);\n  const [notes, setNotes] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [existingRecord, setExistingRecord] = useState<WorkTime | null>(null);\n  const [toast, setToast] = useState<{ show: boolean; message: string; type: 'success' | 'error' }>({\n    show: false,\n    message: '',\n    type: 'success'\n  });\n\n  const currentUser = UserAuthService.getCurrentUser();\n\n  useEffect(() => {\n    if (currentUser) {\n      checkExistingRecord();\n    }\n  }, [date, currentUser]);\n\n  const checkExistingRecord = () => {\n    if (!currentUser) return;\n\n    const existing = WorkTimeService.getWorkTimeByDate(currentUser.id, date);\n    if (existing) {\n      setExistingRecord(existing);\n      setStartTime(existing.startTime);\n      setEndTime(existing.endTime);\n      setBreakTime(existing.breakTime);\n      setNotes(existing.notes || '');\n    } else {\n      setExistingRecord(null);\n      setStartTime('09:00');\n      setEndTime('18:00');\n      setBreakTime(60);\n      setNotes('');\n    }\n  };\n\n  const calculateHours = (start: string, end: string, breakMinutes: number): number => {\n    const [startHour, startMin] = start.split(':').map(Number);\n    const [endHour, endMin] = end.split(':').map(Number);\n\n    const startMinutes = startHour * 60 + startMin;\n    let endMinutes = endHour * 60 + endMin;\n\n    if (endMinutes < startMinutes) {\n      endMinutes += 24 * 60;\n    }\n\n    const totalMinutes = endMinutes - startMinutes - breakMinutes;\n    return Math.max(0, totalMinutes / 60);\n  };\n\n  const showToast = (message: string, type: 'success' | 'error') => {\n    setToast({ show: true, message, type });\n    setTimeout(() => {\n      setToast({ show: false, message: '', type: 'success' });\n    }, 3000);\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!currentUser) {\n      showToast('로그인이 필요합니다.', 'error');\n      return;\n    }\n\n    setIsLoading(true);\n\n    try {\n      const workTime = WorkTimeService.addWorkTime(\n        currentUser.id,\n        date,\n        startTime,\n        endTime,\n        breakTime,\n        notes.trim() || undefined\n      );\n\n      const actionText = existingRecord ? '수정' : '등록';\n      showToast(`근무시간이 성공적으로 ${actionText}되었습니다.`, 'success');\n      setExistingRecord(workTime);\n\n      // 새로운 날짜로 이동하여 다음 입력 준비\n      if (!existingRecord) {\n        const nextDay = new Date(date);\n        nextDay.setDate(nextDay.getDate() + 1);\n        const nextDateString = nextDay.toISOString().split('T')[0];\n\n        // 미래 날짜가 아닌 경우에만 이동\n        const today = new Date().toISOString().split('T')[0];\n        if (nextDateString <= today) {\n          setDate(nextDateString);\n        }\n      }\n    } catch (error) {\n      showToast('근무시간 저장에 실패했습니다.', 'error');\n      console.error(error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const quickTimeSet = (startH: number, endH: number, breakMin: number) => {\n    setStartTime(`${startH.toString().padStart(2, '0')}:00`);\n    setEndTime(`${endH.toString().padStart(2, '0')}:00`);\n    setBreakTime(breakMin);\n  };\n\n  const currentHours = calculateHours(startTime, endTime, breakTime);\n  const isValidTime = currentHours > 0 && currentHours <= 24;\n\n  return (\n    <div className=\"work-time-input\">\n      <div className=\"input-header\">\n        <div className=\"input-title\">\n          <span className=\"input-icon\">⏰</span>\n          <div>\n            <h2>근무시간 입력</h2>\n            <p>정확한 근무시간을 기록해주세요</p>\n          </div>\n        </div>\n        {existingRecord && (\n          <div className=\"edit-indicator\">\n            <span className=\"edit-icon\">✏️</span>\n            <span>수정 모드</span>\n          </div>\n        )}\n      </div>\n\n      <form onSubmit={handleSubmit} className=\"work-form\">\n        <div className=\"form-section\">\n          <h3 className=\"section-title\">📅 기본 정보</h3>\n\n          <div className=\"form-row\">\n            <div className=\"form-group\">\n              <label htmlFor=\"date\" className=\"form-label\">날짜</label>\n              <input\n                id=\"date\"\n                type=\"date\"\n                value={date}\n                onChange={(e) => setDate(e.target.value)}\n                max={new Date().toISOString().split('T')[0]}\n                className=\"form-input\"\n                required\n              />\n            </div>\n          </div>\n        </div>\n\n        <div className=\"form-section\">\n          <h3 className=\"section-title\">🕐 근무시간</h3>\n\n          <div className=\"quick-times\">\n            <div className=\"quick-times-header\">빠른 설정</div>\n            <div className=\"quick-time-buttons\">\n              <button\n                type=\"button\"\n                className=\"quick-time-btn\"\n                onClick={() => quickTimeSet(9, 18, 60)}\n              >\n                09:00-18:00 (1시간 휴게)\n              </button>\n              <button\n                type=\"button\"\n                className=\"quick-time-btn\"\n                onClick={() => quickTimeSet(10, 19, 60)}\n              >\n                10:00-19:00 (1시간 휴게)\n              </button>\n              <button\n                type=\"button\"\n                className=\"quick-time-btn\"\n                onClick={() => quickTimeSet(14, 22, 30)}\n              >\n                14:00-22:00 (30분 휴게)\n              </button>\n            </div>\n          </div>\n\n          <div className=\"form-row\">\n            <div className=\"form-group\">\n              <label htmlFor=\"startTime\" className=\"form-label\">시작 시간</label>\n              <input\n                id=\"startTime\"\n                type=\"time\"\n                value={startTime}\n                onChange={(e) => setStartTime(e.target.value)}\n                className=\"form-input\"\n                required\n              />\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"endTime\" className=\"form-label\">종료 시간</label>\n              <input\n                id=\"endTime\"\n                type=\"time\"\n                value={endTime}\n                onChange={(e) => setEndTime(e.target.value)}\n                className=\"form-input\"\n                required\n              />\n            </div>\n          </div>\n\n          <div className=\"form-row\">\n            <div className=\"form-group\">\n              <label htmlFor=\"breakTime\" className=\"form-label\">휴게시간 (분)</label>\n              <select\n                id=\"breakTime\"\n                value={breakTime}\n                onChange={(e) => setBreakTime(Number(e.target.value))}\n                className=\"form-input\"\n                required\n              >\n                <option value={0}>0분</option>\n                <option value={30}>30분</option>\n                <option value={60}>1시간</option>\n                <option value={90}>1시간 30분</option>\n                <option value={120}>2시간</option>\n              </select>\n            </div>\n            <div className=\"form-group\">\n              <label className=\"form-label\">총 근무시간</label>\n              <div className={`work-hours-display ${!isValidTime ? 'invalid' : ''}`}>\n                {isValidTime ? `${currentHours.toFixed(1)}시간` : '잘못된 시간'}\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"form-section\">\n          <h3 className=\"section-title\">📝 메모</h3>\n          <div className=\"form-group\">\n            <textarea\n              id=\"notes\"\n              value={notes}\n              onChange={(e) => setNotes(e.target.value)}\n              placeholder=\"특이사항, 업무 내용 등을 기록해주세요 (선택사항)\"\n              className=\"form-textarea\"\n              rows={3}\n            />\n          </div>\n        </div>\n\n        <div className=\"form-actions\">\n          <button\n            type=\"submit\"\n            className={`submit-btn ${!isValidTime ? 'disabled' : ''}`}\n            disabled={isLoading || !isValidTime}\n          >\n            {isLoading ? (\n              <>\n                <span className=\"loading-icon\">⟳</span>\n                저장 중...\n              </>\n            ) : (\n              <>\n                <span className=\"submit-icon\">💾</span>\n                {existingRecord ? '수정하기' : '등록하기'}\n              </>\n            )}\n          </button>\n        </div>\n      </form>\n\n      {/* Toast Notification */}\n      {toast.show && (\n        <div className={`work-toast ${toast.type}`}>\n          <span className=\"toast-icon\">\n            {toast.type === 'success' ? '✅' : '❌'}\n          </span>\n          <span className=\"toast-message\">{toast.message}</span>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default WorkTimeInput;","import React, { useState, useEffect } from 'react';\nimport { UserAuthService, User } from '../services/userAuthService';\nimport UserLogin from './UserLogin';\nimport WorkDashboard from './WorkDashboard';\nimport WorkTimeInput from './WorkTimeInput';\nimport '../styles/components/UserApp.css';\n\ntype UserPageType = 'dashboard' | 'input';\n\nconst UserApp: React.FC = () => {\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [currentUser, setCurrentUser] = useState<(User & { loginTime: number }) | null>(null);\n  const [currentPage, setCurrentPage] = useState<UserPageType>('dashboard');\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    // 초기 인증 상태 확인\n    const checkAuth = () => {\n      const authStatus = UserAuthService.isAuthenticated();\n      const user = UserAuthService.getCurrentUser();\n\n      setIsAuthenticated(authStatus);\n      setCurrentUser(user);\n      setIsLoading(false);\n    };\n\n    checkAuth();\n\n    // 세션 만료를 주기적으로 체크 (1분마다)\n    const interval = setInterval(() => {\n      const authStatus = UserAuthService.isAuthenticated();\n      const user = UserAuthService.getCurrentUser();\n\n      if (authStatus !== isAuthenticated) {\n        setIsAuthenticated(authStatus);\n        setCurrentUser(user);\n      }\n    }, 60000);\n\n    return () => clearInterval(interval);\n  }, [isAuthenticated]);\n\n  const handleLoginSuccess = () => {\n    const user = UserAuthService.getCurrentUser();\n    setIsAuthenticated(true);\n    setCurrentUser(user);\n  };\n\n  const handleLogout = () => {\n    const confirmLogout = window.confirm('정말 로그아웃하시겠습니까?');\n    if (confirmLogout) {\n      UserAuthService.logout();\n      setIsAuthenticated(false);\n      setCurrentUser(null);\n      setCurrentPage('dashboard');\n    }\n  };\n\n  const renderCurrentPage = () => {\n    switch (currentPage) {\n      case 'dashboard':\n        return <WorkDashboard />;\n      case 'input':\n        return <WorkTimeInput />;\n      default:\n        return <WorkDashboard />;\n    }\n  };\n\n  // 초기 로딩 상태\n  if (isLoading) {\n    return (\n      <div className=\"user-app-loading\">\n        <div className=\"loading-content\">\n          <div className=\"loading-icon\">⚙️</div>\n          <div className=\"loading-text\">근무시간 관리 시스템 시작 중...</div>\n        </div>\n      </div>\n    );\n  }\n\n  // 인증되지 않은 경우 로그인 화면 표시\n  if (!isAuthenticated || !currentUser) {\n    return <UserLogin onLoginSuccess={handleLoginSuccess} />;\n  }\n\n  // 인증된 경우 메인 앱 표시\n  return (\n    <div className=\"user-app\">\n      {/* Navigation */}\n      <nav className=\"user-nav\">\n        <div className=\"nav-header\">\n          <div className=\"brand\">\n            <div className=\"brand-icon\">⏰</div>\n            <div className=\"brand-content\">\n              <h1 className=\"brand-title\">근무시간 관리</h1>\n              <p className=\"brand-subtitle\">Work Time Tracker</p>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"nav-menu\">\n          <div className=\"menu-section\">\n            <div className=\"menu-label\">메인 메뉴</div>\n            <button\n              className={`nav-item ${currentPage === 'dashboard' ? 'active' : ''}`}\n              onClick={() => setCurrentPage('dashboard')}\n            >\n              <span className=\"nav-icon\">📊</span>\n              <span className=\"nav-text\">대시보드</span>\n            </button>\n            <button\n              className={`nav-item ${currentPage === 'input' ? 'active' : ''}`}\n              onClick={() => setCurrentPage('input')}\n            >\n              <span className=\"nav-icon\">⏰</span>\n              <span className=\"nav-text\">근무시간 입력</span>\n            </button>\n          </div>\n        </div>\n\n        <div className=\"nav-footer\">\n          {/* User Info */}\n          <div className=\"user-info\">\n            <div className=\"user-details\">\n              <div className=\"user-avatar\">👤</div>\n              <div className=\"user-text\">\n                <span className=\"user-name\">{currentUser.name}</span>\n                <span className=\"user-email\">{currentUser.email}</span>\n                <span className=\"login-time\">\n                  로그인: {new Date(currentUser.loginTime).toLocaleString('ko-KR', {\n                    month: '2-digit',\n                    day: '2-digit',\n                    hour: '2-digit',\n                    minute: '2-digit'\n                  })}\n                </span>\n              </div>\n            </div>\n            <button className=\"logout-btn\" onClick={handleLogout} title=\"로그아웃\">\n              🚪\n            </button>\n          </div>\n\n          {/* Version Info */}\n          <div className=\"version-info\">\n            <span className=\"version-text\">v1.0.0</span>\n            <span className=\"company\">© Work Tracker</span>\n          </div>\n        </div>\n      </nav>\n\n      {/* Main Content */}\n      <main className=\"user-main\">\n        {renderCurrentPage()}\n      </main>\n    </div>\n  );\n};\n\nexport default UserApp;","import { supabase } from '../firebase/config';\nimport { User, UserWithSchedule } from '../types';\nimport { PasswordUtils } from '../utils/passwordUtils';\n\nexport class UserService {\n  private static tableName = 'users';\n\n  static async getAllUsers(): Promise<User[]> {\n    try {\n      const { data, error } = await supabase\n        .from(this.tableName)\n        .select('*')\n        .order('created_at', { ascending: false });\n\n      if (error) throw error;\n      return data || [];\n    } catch (error) {\n      console.error('Error getting all users:', error);\n      return [];\n    }\n  }\n\n  static async getUserById(id: string): Promise<User | null> {\n    try {\n      const { data, error } = await supabase\n        .from(this.tableName)\n        .select('*')\n        .eq('id', id)\n        .single();\n\n      if (error) throw error;\n      return data;\n    } catch (error) {\n      console.error('Error getting user by ID:', error);\n      return null;\n    }\n  }\n\n  static async createUser(user: Omit<User, 'id' | 'created_at' | 'updated_at'>, generateLogin: boolean = true): Promise<User> {\n    let passwordHash = null;\n    let passwordTemp = null;\n    let isPasswordTemp = false;\n\n    if (generateLogin) {\n      passwordTemp = PasswordUtils.generateTempPassword();\n      passwordHash = await PasswordUtils.hashPassword(passwordTemp);\n      isPasswordTemp = true;\n    }\n\n    const userData = {\n      ...user,\n      password_hash: passwordHash,\n      password_temp: passwordTemp,\n      is_password_temp: isPasswordTemp,\n      is_active: user.is_active ?? true,\n      hourly_wage: user.hourly_wage || 0,\n      monthly_salary: user.monthly_salary || 0,\n      salary_type: user.salary_type || 'HOURLY',\n    };\n\n    try {\n      const { data, error } = await supabase\n        .from(this.tableName)\n        .insert(userData)\n        .select()\n        .single();\n\n      if (error) {\n        if (error.code === '23505') {\n          throw new Error('이미 존재하는 사용자입니다.');\n        }\n        throw error;\n      }\n\n      const result = { ...data, password_temp: passwordTemp };\n      return result;\n    } catch (error) {\n      console.error('Error creating user:', error);\n      throw error;\n    }\n  }\n\n  static async updateUser(id: string, updates: Partial<Omit<User, 'id' | 'created_at'>>): Promise<User | null> {\n    try {\n      const { data, error } = await supabase\n        .from(this.tableName)\n        .update(updates)\n        .eq('id', id)\n        .select()\n        .single();\n\n      if (error) throw error;\n      return data;\n    } catch (error) {\n      console.error('Error updating user:', error);\n      throw error;\n    }\n  }\n\n  static async deleteUser(id: string): Promise<boolean> {\n    try {\n      const { error } = await supabase\n        .from(this.tableName)\n        .delete()\n        .eq('id', id);\n\n      if (error) throw error;\n      return true;\n    } catch (error) {\n      console.error('Error deleting user:', error);\n      return false;\n    }\n  }\n\n  static async getUsersWithCurrentSchedule(): Promise<UserWithSchedule[]> {\n    try {\n      const currentWeekStart = this.getCurrentWeekStart();\n      const { data: users, error } = await supabase\n        .from(this.tableName)\n        .select('*')\n        .eq('is_active', true);\n\n      if (error) throw error;\n      const usersWithSchedule: UserWithSchedule[] = [];\n\n      for (const user of users || []) {\n        const userWithSchedule = user as UserWithSchedule;\n\n        // 현재 주 스케줄 조회\n        const { data: schedules } = await supabase\n          .from('work_schedules')\n          .select('*')\n          .eq('user_id', user.id)\n          .eq('week_start_date', currentWeekStart);\n\n        if (schedules && schedules.length > 0) {\n          const schedule = schedules[0];\n          userWithSchedule.current_schedule = {\n            user_id: user.id!,\n            week_start_date: currentWeekStart,\n            monday_start: schedule.monday_start,\n            monday_end: schedule.monday_end,\n            tuesday_start: schedule.tuesday_start,\n            tuesday_end: schedule.tuesday_end,\n            wednesday_start: schedule.wednesday_start,\n            wednesday_end: schedule.wednesday_end,\n            thursday_start: schedule.thursday_start,\n            thursday_end: schedule.thursday_end,\n            friday_start: schedule.friday_start,\n            friday_end: schedule.friday_end,\n            saturday_start: schedule.saturday_start,\n            saturday_end: schedule.saturday_end,\n            sunday_start: schedule.sunday_start,\n            sunday_end: schedule.sunday_end,\n          };\n        }\n\n        // 주간 근무 시간 계산\n        const weeklyHours = await this.getUserWeeklyHours(user.id!, currentWeekStart);\n        userWithSchedule.total_hours_this_week = weeklyHours.total_hours;\n        userWithSchedule.total_pay_this_week = weeklyHours.total_pay;\n\n        usersWithSchedule.push(userWithSchedule);\n      }\n\n      return usersWithSchedule.sort((a, b) => a.full_name.localeCompare(b.full_name));\n    } catch (error) {\n      console.error('Error getting users with current schedule:', error);\n      return [];\n    }\n  }\n\n  private static getCurrentWeekStart(): string {\n    const today = new Date();\n    const dayOfWeek = today.getDay();\n    const diff = today.getDate() - dayOfWeek + (dayOfWeek === 0 ? -6 : 1);\n    const monday = new Date(today.setDate(diff));\n    return monday.toISOString().split('T')[0];\n  }\n\n  private static async getUserWeeklyHours(userId: string, weekStart: string): Promise<{total_hours: number, total_pay: number}> {\n    try {\n      const weekEnd = new Date(weekStart);\n      weekEnd.setDate(weekEnd.getDate() + 6);\n      const weekEndStr = weekEnd.toISOString().split('T')[0];\n\n      const { data: workRecords } = await supabase\n        .from('work_records')\n        .select('*')\n        .eq('user_id', userId)\n        .gte('work_date', weekStart)\n        .lte('work_date', weekEndStr);\n\n      const totalHours = (workRecords || []).reduce((sum, record) => sum + (record.total_hours || 0), 0);\n      const totalPay = (workRecords || []).reduce((sum, record) => sum + (record.total_pay || 0), 0);\n\n      return { total_hours: totalHours, total_pay: totalPay };\n    } catch (error) {\n      console.error('Error getting user weekly hours:', error);\n      return { total_hours: 0, total_pay: 0 };\n    }\n  }\n\n  // 로그인 관련 메서드들\n  static async getUserByEmail(email: string): Promise<User | null> {\n    try {\n      const { data, error } = await supabase\n        .from(this.tableName)\n        .select('*')\n        .eq('email', email)\n        .eq('is_active', true)\n        .single();\n\n      if (error) throw error;\n      return data;\n    } catch (error) {\n      console.error('Error getting user by email:', error);\n      return null;\n    }\n  }\n\n  static async authenticateUser(email: string, password: string): Promise<User | null> {\n    const user = await this.getUserByEmail(email);\n    if (!user || !user.password_hash) return null;\n\n    const isValid = await PasswordUtils.verifyPassword(password, user.password_hash);\n    if (!isValid) return null;\n\n    // 로그인 시간 업데이트\n    await this.updateLastLogin(user.id!);\n\n    return user;\n  }\n\n  static async updateLastLogin(userId: string): Promise<void> {\n    try {\n      const { error } = await supabase\n        .from(this.tableName)\n        .update({ last_login: new Date().toISOString() })\n        .eq('id', userId);\n\n      if (error) throw error;\n    } catch (error) {\n      console.error('Error updating last login:', error);\n    }\n  }\n\n  static async resetPassword(userId: string): Promise<string> {\n    const tempPassword = PasswordUtils.generateTempPassword();\n    const passwordHash = await PasswordUtils.hashPassword(tempPassword);\n\n    try {\n      const { error } = await supabase\n        .from(this.tableName)\n        .update({\n          password_hash: passwordHash,\n          password_temp: tempPassword,\n          is_password_temp: true\n        })\n        .eq('id', userId);\n\n      if (error) throw error;\n      return tempPassword;\n    } catch (error) {\n      console.error('Error resetting password:', error);\n      throw error;\n    }\n  }\n\n  static async changePassword(userId: string, newPassword: string): Promise<boolean> {\n    const validation = PasswordUtils.validatePassword(newPassword);\n    if (!validation.valid) {\n      throw new Error(validation.errors.join(', '));\n    }\n\n    const passwordHash = await PasswordUtils.hashPassword(newPassword);\n\n    try {\n      const { error } = await supabase\n        .from(this.tableName)\n        .update({\n          password_hash: passwordHash,\n          password_temp: null,\n          is_password_temp: false\n        })\n        .eq('id', userId);\n\n      if (error) throw error;\n      return true;\n    } catch (error) {\n      console.error('Error changing password:', error);\n      throw error;\n    }\n  }\n\n  static async toggleUserLoginAccess(userId: string, hasAccess: boolean): Promise<void> {\n    try {\n      if (hasAccess) {\n        // 로그인 권한 부여 - 임시 비밀번호 생성\n        const tempPassword = PasswordUtils.generateTempPassword();\n        const passwordHash = await PasswordUtils.hashPassword(tempPassword);\n\n        const { error } = await supabase\n          .from(this.tableName)\n          .update({\n            password_hash: passwordHash,\n            password_temp: tempPassword,\n            is_password_temp: true\n          })\n          .eq('id', userId);\n\n        if (error) throw error;\n      } else {\n        // 로그인 권한 제거\n        const { error } = await supabase\n          .from(this.tableName)\n          .update({\n            password_hash: null,\n            password_temp: null,\n            is_password_temp: true\n          })\n          .eq('id', userId);\n\n        if (error) throw error;\n      }\n    } catch (error) {\n      console.error('Error toggling user login access:', error);\n      throw error;\n    }\n  }\n\n}"],"names":["PasswordUtils","hashPassword","password","data","TextEncoder","encode","hashBuffer","crypto","subtle","digest","Array","from","Uint8Array","map","b","toString","padStart","join","verifyPassword","hash","this","generateTempPassword","chars","result","i","charAt","Math","floor","random","validatePassword","errors","length","push","valid","UserAuthService","login","email","dbUser","UserService","authenticateUser","success","error","is_active","user","id","name","full_name","role","sessionData","token","generateToken","loginTime","Date","now","expiryTime","SESSION_DURATION","localStorage","setItem","USER_SESSION_KEY","JSON","stringify","console","logout","removeItem","isAuthenticated","getSessionData","getCurrentUser","_objectSpread","extendSession","getTimeUntilExpiry","max","getLoginEnabledUsers","getAllUsers","filter","password_hash","hasTemp","is_password_temp","userId","btoa","concat","getItem","parse","_unused","_ref","onLoginSuccess","setEmail","useState","setPassword","setError","isLoading","setIsLoading","availableUsers","setAvailableUsers","useEffect","loadAvailableUsers","async","users","_jsx","className","children","_jsxs","onSubmit","e","preventDefault","err","htmlFor","type","value","onChange","target","placeholder","required","disabled","trim","_Fragment","slice","onClick","quickLogin","userEmail","isTemp","alert","some","u","WorkTimeService","addWorkTime","date","startTime","endTime","breakTime","notes","records","getAllRecords","existingIndex","findIndex","record","totalHours","calculateWorkHours","workTime","generateId","createdAt","updatedAt","saveRecords","getUserWorkTimes","limit","sort","a","getTime","getWorkTimeByDate","find","getWorkSummary","startOfWeek","setDate","getDate","getDay","setHours","startOfMonth","getFullYear","getMonth","reduce","sum","thisWeekHours","thisMonthHours","totalDays","averageHours","getWeeklyData","today","dateString","toISOString","split","r","dayNames","hours","dayName","deleteWorkTime","workTimeId","index","splice","startHour","startMin","Number","endHour","endMin","startMinutes","endMinutes","totalMinutes","STORAGE_KEY","substr","isOpen","onClose","onSuccess","currentPassword","setCurrentPassword","newPassword","setNewPassword","confirmPassword","setConfirmPassword","handleClose","validation","getUserById","changePassword","WorkDashboard","summary","setSummary","recentWork","setRecentWork","weeklyData","setWeeklyData","selectedDate","setSelectedDate","selectedWork","setSelectedWork","showPasswordModal","setShowPasswordModal","currentUser","loadDashboardData","summaryData","recentWorkData","weeklyChartData","formatTime","timeString","substring","formatHours","h","m","round","getWorkStatusText","toFixed","day","maxHours","d","height","color","work","handleDateClick","style","backgroundColor","toLocaleDateString","month","weekday","toLowerCase","stopPropagation","year","PasswordChangeModal","WorkTimeInput","setStartTime","setEndTime","setBreakTime","setNotes","existingRecord","setExistingRecord","toast","setToast","show","message","checkExistingRecord","existing","showToast","setTimeout","quickTimeSet","startH","endH","breakMin","currentHours","calculateHours","start","end","breakMinutes","isValidTime","undefined","nextDay","nextDateString","rows","UserApp","setIsAuthenticated","setCurrentUser","currentPage","setCurrentPage","checkAuth","authStatus","interval","setInterval","clearInterval","handleLoginSuccess","toLocaleString","hour","minute","handleLogout","window","confirm","title","renderCurrentPage","UserLogin","supabase","tableName","select","order","ascending","eq","single","createUser","_user$is_active","passwordHash","passwordTemp","isPasswordTemp","arguments","userData","password_temp","hourly_wage","monthly_salary","salary_type","insert","code","Error","updateUser","updates","update","deleteUser","delete","getUsersWithCurrentSchedule","currentWeekStart","getCurrentWeekStart","usersWithSchedule","userWithSchedule","schedules","schedule","current_schedule","user_id","week_start_date","monday_start","monday_end","tuesday_start","tuesday_end","wednesday_start","wednesday_end","thursday_start","thursday_end","friday_start","friday_end","saturday_start","saturday_end","sunday_start","sunday_end","weeklyHours","getUserWeeklyHours","total_hours_this_week","total_hours","total_pay_this_week","total_pay","localeCompare","dayOfWeek","diff","weekStart","weekEnd","weekEndStr","workRecords","gte","lte","getUserByEmail","updateLastLogin","last_login","resetPassword","tempPassword","toggleUserLoginAccess","hasAccess"],"sourceRoot":""}