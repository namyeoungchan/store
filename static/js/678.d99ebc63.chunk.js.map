{"version":3,"file":"static/js/678.d99ebc63.chunk.js","mappings":"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","sources":["components/OrderSystem.tsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { Menu, OrderItem, Order, RecipeWithDetails, PaymentType } from '../types';\nimport { MenuService } from '../services/menuService';\nimport { OrderService } from '../services/orderService';\nimport { InventoryService } from '../services/inventoryService';\nimport { SalesService } from '../services/salesService';\n\ninterface OrderSystemProps {\n  onOrderComplete?: (order: Order) => void;\n}\n\ninterface CartItem extends OrderItem {\n  menu_name: string;\n  price: number;\n}\n\nconst OrderSystem: React.FC<OrderSystemProps> = ({ onOrderComplete }) => {\n  const [menus, setMenus] = useState<Menu[]>([]);\n  const [cart, setCart] = useState<CartItem[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const [menuRecipes, setMenuRecipes] = useState<{ [menuId: string]: RecipeWithDetails[] }>({});\n  const [menuAvailability, setMenuAvailability] = useState<{ [menuId: string]: { available: boolean; reason?: string } }>({});\n  const [selectedPaymentType, setSelectedPaymentType] = useState<PaymentType>('CARD');\n\n  const loadMenus = useCallback(async () => {\n    try {\n      const menuData = await MenuService.getAllMenus();\n      setMenus(menuData);\n\n      // Load recipes for all menus\n      const recipes: { [menuId: string]: RecipeWithDetails[] } = {};\n      for (const menu of menuData) {\n        if (menu.id) {\n          recipes[menu.id] = await MenuService.getRecipesByMenuId(menu.id);\n        }\n      }\n      setMenuRecipes(recipes);\n    } catch (err) {\n      setError('메뉴를 불러오는데 실패했습니다.');\n    }\n  }, []);\n\n  const checkMenuAvailability = useCallback(async () => {\n    const availability: { [menuId: string]: { available: boolean; reason?: string } } = {};\n\n    for (const menu of menus) {\n      if (!menu.id) continue;\n\n      const recipes = menuRecipes[menu.id] || [];\n      if (recipes.length === 0) {\n        availability[menu.id] = { available: false, reason: '재료가 설정되지 않음' };\n        continue;\n      }\n\n      // Calculate how many units of this menu we already have in cart\n      const cartQuantity = cart.find(item => item.menu_id === menu.id)?.quantity || 0;\n\n      let canMake = true;\n      let limitingIngredient = '';\n      let maxQuantity = Infinity;\n\n      for (const recipe of recipes) {\n        const inventory = await InventoryService.getInventoryByIngredientId(recipe.ingredient_id);\n        if (!inventory) {\n          availability[menu.id] = {\n            available: false,\n            reason: `재고 정보 없음: ${recipe.ingredient_name}`\n          };\n          canMake = false;\n          break;\n        }\n\n        const requiredForOne = recipe.quantity;\n        const alreadyUsed = requiredForOne * cartQuantity;\n        const availableStock = inventory.current_stock - alreadyUsed;\n        const possibleQuantity = Math.floor(availableStock / requiredForOne);\n\n        if (possibleQuantity < 1) {\n          availability[menu.id] = {\n            available: false,\n            reason: `재고 부족: ${recipe.ingredient_name} (필요: ${requiredForOne}, 재고: ${availableStock})`\n          };\n          canMake = false;\n          break;\n        }\n\n        if (possibleQuantity < maxQuantity) {\n          maxQuantity = possibleQuantity;\n          limitingIngredient = recipe.ingredient_name;\n        }\n      }\n\n      if (canMake) {\n        availability[menu.id] = {\n          available: true,\n          reason: maxQuantity === Infinity ? '' : `최대 ${maxQuantity}개 주문 가능 (${limitingIngredient} 제한)`\n        };\n      }\n    }\n\n    setMenuAvailability(availability);\n  }, [menus, menuRecipes, cart]);\n\n  useEffect(() => {\n    loadMenus();\n  }, []);\n\n  useEffect(() => {\n    checkMenuAvailability();\n  }, [menus, cart, menuRecipes]);\n\n  const addToCart = (menu: Menu) => {\n    if (!menu.id) return;\n\n    const availability = menuAvailability[menu.id];\n    if (!availability?.available) {\n      setError(availability?.reason || '이 메뉴는 현재 주문할 수 없습니다.');\n      setTimeout(() => setError(''), 3000);\n      return;\n    }\n\n    const existingItem = cart.find(item => item.menu_id === menu.id);\n\n    if (existingItem) {\n      setCart(cart.map(item =>\n        item.menu_id === menu.id\n          ? { ...item, quantity: item.quantity + 1 }\n          : item\n      ));\n    } else {\n      const newItem: CartItem = {\n        id: Date.now().toString(),\n        order_id: \"0\",\n        menu_id: menu.id!,\n        quantity: 1,\n        unit_price: menu.price,\n        menu_name: menu.name,\n        price: menu.price\n      };\n      setCart([...cart, newItem]);\n    }\n\n    setSuccess(`${menu.name}이(가) 주문에 추가되었습니다.`);\n    setTimeout(() => setSuccess(''), 2000);\n  };\n\n  const updateQuantity = (menuId: string, newQuantity: number) => {\n    if (newQuantity <= 0) {\n      removeFromCart(menuId);\n      return;\n    }\n\n    setCart(cart.map(item =>\n      item.menu_id === menuId\n        ? { ...item, quantity: newQuantity }\n        : item\n    ));\n  };\n\n  const removeFromCart = (menuId: string) => {\n    setCart(cart.filter(item => item.menu_id !== menuId));\n  };\n\n  const clearCart = () => {\n    if (window.confirm('장바구니를 비우시겠습니까?')) {\n      setCart([]);\n    }\n  };\n\n  const calculateTotal = () => {\n    return cart.reduce((total, item) => total + (item.unit_price * item.quantity), 0);\n  };\n\n\n  const processOrder = async () => {\n    if (cart.length === 0) {\n      setError('주문할 메뉴를 선택해주세요.');\n      return;\n    }\n\n    setLoading(true);\n    setError('');\n\n    try {\n      // 주문 확인\n      const totalAmount = calculateTotal();\n      const confirmMessage = `\n주문 내역:\n${cart.map(item => `• ${item.menu_name} x${item.quantity} = ₩${(item.unit_price * item.quantity).toLocaleString()}`).join('\\n')}\n\n총 금액: ₩${totalAmount.toLocaleString()}\n\n주문을 진행하시겠습니까?`;\n\n      if (!window.confirm(confirmMessage)) {\n        setLoading(false);\n        return;\n      }\n\n      // OrderService의 createOrderWithItems 메서드 사용 (재고 체크 및 차감 자동 처리)\n      const orderItems = cart.map(item => ({\n        menu_id: item.menu_id,\n        quantity: item.quantity,\n        unit_price: item.unit_price\n      }));\n\n      const orderId = await OrderService.createOrderWithItems(orderItems, selectedPaymentType);\n\n      setSuccess('주문이 성공적으로 완료되었습니다!');\n      setCart([]);\n\n      if (onOrderComplete) {\n        const order = await OrderService.getOrderById(orderId);\n        if (order) {\n          onOrderComplete(order);\n        }\n      }\n\n    } catch (err) {\n      setError(err instanceof Error ? err.message : '주문 처리 중 오류가 발생했습니다.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"order-system\">\n      <div className=\"order-header\">\n        <h2>🍽️ 주문 시스템</h2>\n        {error && <div className=\"alert alert-error\">{error}</div>}\n        {success && <div className=\"alert alert-success\">{success}</div>}\n      </div>\n\n      <div className=\"order-content\">\n        {/* 메뉴 목록 */}\n        <div className=\"menu-section\">\n          <h3>메뉴 선택</h3>\n          <div className=\"menu-grid\">\n            {menus.map(menu => {\n              const availability = menuAvailability[menu.id!];\n              const isAvailable = availability?.available;\n              const cartItem = cart.find(item => item.menu_id === menu.id);\n\n              return (\n                <div key={menu.id} className={`menu-card ${!isAvailable ? 'unavailable' : ''}`}>\n                  <div className=\"menu-info\">\n                    <h4>{menu.name}</h4>\n                    <p className=\"menu-description\">{menu.description}</p>\n                    <p className=\"menu-price\">₩{menu.price.toLocaleString()}</p>\n\n                    {/* Stock Status */}\n                    <div className=\"stock-status\">\n                      {availability ? (\n                        <div className={`status-badge ${isAvailable ? 'available' : 'unavailable'}`}>\n                          {isAvailable ? '✅ 주문 가능' : '❌ 주문 불가'}\n                        </div>\n                      ) : (\n                        <div className=\"status-badge loading\">📋 확인 중...</div>\n                      )}\n\n                      {availability?.reason && (\n                        <p className=\"availability-reason\">{availability.reason}</p>\n                      )}\n\n                      {cartItem && (\n                        <p className=\"cart-info\">장바구니에 {cartItem.quantity}개</p>\n                      )}\n                    </div>\n\n                    {/* Recipe Info */}\n                    {menuRecipes[menu.id!] && menuRecipes[menu.id!].length > 0 && (\n                      <div className=\"recipe-preview\">\n                        <p className=\"recipe-title\">📝 필요 재료:</p>\n                        <div className=\"recipe-ingredients\">\n                          {menuRecipes[menu.id!].map(recipe => (\n                            <span key={recipe.id} className=\"ingredient-tag\">\n                              {recipe.ingredient_name} {recipe.quantity}{recipe.ingredient_unit}\n                            </span>\n                          ))}\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                  <button\n                    className=\"btn btn-primary\"\n                    onClick={() => addToCart(menu)}\n                    disabled={loading || !isAvailable}\n                  >\n                    {!isAvailable ? '주문 불가' : '추가'}\n                  </button>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n\n        {/* 장바구니 */}\n        <div className=\"cart-section\">\n          <div className=\"cart-header\">\n            <h3>주문 내역 ({cart.length})</h3>\n            {cart.length > 0 && (\n              <button className=\"btn btn-secondary btn-small\" onClick={clearCart}>\n                전체 삭제\n              </button>\n            )}\n          </div>\n\n          {cart.length === 0 ? (\n            <div className=\"empty-cart\">\n              <p>선택된 메뉴가 없습니다.</p>\n            </div>\n          ) : (\n            <>\n              <div className=\"cart-items\">\n                {cart.map(item => (\n                  <div key={item.id} className=\"cart-item\">\n                    <div className=\"item-info\">\n                      <h4>{item.menu_name}</h4>\n                      <p>₩{item.unit_price.toLocaleString()} × {item.quantity}</p>\n                    </div>\n                    <div className=\"item-controls\">\n                      <div className=\"quantity-controls\">\n                        <button\n                          className=\"btn btn-small\"\n                          onClick={() => updateQuantity(item.menu_id, item.quantity - 1)}\n                        >\n                          -\n                        </button>\n                        <span className=\"quantity\">{item.quantity}</span>\n                        <button\n                          className=\"btn btn-small\"\n                          onClick={() => updateQuantity(item.menu_id, item.quantity + 1)}\n                        >\n                          +\n                        </button>\n                      </div>\n                      <button\n                        className=\"btn btn-danger btn-small\"\n                        onClick={() => removeFromCart(item.menu_id)}\n                      >\n                        삭제\n                      </button>\n                    </div>\n                    <div className=\"item-total\">\n                      ₩{(item.unit_price * item.quantity).toLocaleString()}\n                    </div>\n                  </div>\n                ))}\n              </div>\n\n              <div className=\"cart-summary\">\n                <div className=\"payment-type-section\">\n                  <h4>결제 방법</h4>\n                  <div className=\"payment-options\">\n                    {(['CARD', 'COUPANG', 'BAEMIN', 'YOGIYO'] as PaymentType[]).map(type => (\n                      <label key={type} className=\"payment-option\">\n                        <input\n                          type=\"radio\"\n                          name=\"paymentType\"\n                          value={type}\n                          checked={selectedPaymentType === type}\n                          onChange={(e) => setSelectedPaymentType(e.target.value as PaymentType)}\n                        />\n                        <span className=\"payment-label\">\n                          {SalesService.getPaymentTypeIcon(type)} {SalesService.getPaymentTypeDisplayName(type)}\n                        </span>\n                      </label>\n                    ))}\n                  </div>\n                  <div className=\"deposit-info\">\n                    <p>\n                      📅 입금 예정일: {SalesService.calculateExpectedDepositDate(\n                        new Date().toISOString(),\n                        selectedPaymentType\n                      )}\n                    </p>\n                  </div>\n                </div>\n\n                <div className=\"total-amount\">\n                  <strong>총 금액: ₩{calculateTotal().toLocaleString()}</strong>\n                </div>\n                <button\n                  className=\"btn btn-success btn-large\"\n                  onClick={processOrder}\n                  disabled={loading || cart.length === 0}\n                >\n                  {loading ? '처리중...' : '주문하기'}\n                </button>\n              </div>\n            </>\n          )}\n        </div>\n      </div>\n\n      <style>{`\n        .order-system {\n          max-width: 1200px;\n          margin: 0 auto;\n          padding: 2rem;\n        }\n\n        .order-header {\n          margin-bottom: 2rem;\n        }\n\n        .order-header h2 {\n          margin: 0 0 1rem 0;\n          color: #333;\n        }\n\n        .alert {\n          padding: 0.75rem 1rem;\n          border-radius: 4px;\n          margin-bottom: 1rem;\n        }\n\n        .alert-error {\n          background-color: #ffeaea;\n          color: #d32f2f;\n          border: 1px solid #ffcdd2;\n        }\n\n        .alert-success {\n          background-color: #e8f5e8;\n          color: #4caf50;\n          border: 1px solid #c8e6c9;\n        }\n\n        .order-content {\n          display: grid;\n          grid-template-columns: 2fr 1fr;\n          gap: 2rem;\n        }\n\n        .menu-section h3, .cart-section h3 {\n          margin: 0 0 1rem 0;\n          color: #333;\n        }\n\n        .menu-grid {\n          display: grid;\n          grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));\n          gap: 1rem;\n        }\n\n        .menu-card {\n          background: white;\n          border: 1px solid #ddd;\n          border-radius: 8px;\n          padding: 1.5rem;\n          box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n          transition: transform 0.2s, box-shadow 0.2s;\n        }\n\n        .menu-card:hover {\n          transform: translateY(-2px);\n          box-shadow: 0 4px 12px rgba(0,0,0,0.15);\n        }\n\n        .menu-card.unavailable {\n          opacity: 0.7;\n          background: #f5f5f5;\n        }\n\n        .menu-card.unavailable:hover {\n          transform: none;\n          box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n        }\n\n        .menu-info h4 {\n          margin: 0 0 0.5rem 0;\n          color: #333;\n          font-size: 1.1rem;\n        }\n\n        .menu-description {\n          color: #666;\n          font-size: 0.9rem;\n          margin: 0 0 1rem 0;\n          line-height: 1.4;\n        }\n\n        .menu-price {\n          font-size: 1.2rem;\n          font-weight: bold;\n          color: #2196f3;\n          margin: 0 0 1rem 0;\n        }\n\n        .stock-status {\n          margin: 1rem 0;\n        }\n\n        .status-badge {\n          display: inline-block;\n          padding: 0.25rem 0.5rem;\n          border-radius: 4px;\n          font-size: 0.8rem;\n          font-weight: 500;\n          margin-bottom: 0.5rem;\n        }\n\n        .status-badge.available {\n          background: #e8f5e8;\n          color: #4caf50;\n          border: 1px solid #4caf50;\n        }\n\n        .status-badge.unavailable {\n          background: #ffebee;\n          color: #f44336;\n          border: 1px solid #f44336;\n        }\n\n        .status-badge.loading {\n          background: #fff3e0;\n          color: #ff9800;\n          border: 1px solid #ff9800;\n        }\n\n        .availability-reason {\n          font-size: 0.75rem;\n          color: #666;\n          margin: 0;\n          line-height: 1.3;\n        }\n\n        .cart-info {\n          font-size: 0.75rem;\n          color: #2196f3;\n          font-weight: 500;\n          margin: 0.25rem 0 0 0;\n        }\n\n        .recipe-preview {\n          margin-top: 1rem;\n          padding-top: 1rem;\n          border-top: 1px solid #eee;\n        }\n\n        .recipe-title {\n          font-size: 0.8rem;\n          font-weight: 600;\n          color: #333;\n          margin: 0 0 0.5rem 0;\n        }\n\n        .recipe-ingredients {\n          display: flex;\n          flex-wrap: wrap;\n          gap: 0.25rem;\n        }\n\n        .ingredient-tag {\n          background: #f0f0f0;\n          color: #555;\n          padding: 0.2rem 0.4rem;\n          border-radius: 3px;\n          font-size: 0.7rem;\n          font-weight: 500;\n        }\n\n        .cart-section {\n          background: white;\n          border-radius: 8px;\n          padding: 1.5rem;\n          box-shadow: 0 2px 8px rgba(0,0,0,0.1);\n          height: fit-content;\n          position: sticky;\n          top: 2rem;\n        }\n\n        .cart-header {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n          margin-bottom: 1rem;\n        }\n\n        .empty-cart {\n          text-align: center;\n          padding: 2rem;\n          color: #999;\n        }\n\n        .cart-item {\n          display: grid;\n          grid-template-columns: 1fr auto auto;\n          gap: 1rem;\n          align-items: center;\n          padding: 1rem 0;\n          border-bottom: 1px solid #eee;\n        }\n\n        .cart-item:last-child {\n          border-bottom: none;\n        }\n\n        .item-info h4 {\n          margin: 0 0 0.25rem 0;\n          font-size: 0.95rem;\n        }\n\n        .item-info p {\n          margin: 0;\n          color: #666;\n          font-size: 0.85rem;\n        }\n\n        .item-controls {\n          display: flex;\n          flex-direction: column;\n          gap: 0.5rem;\n          align-items: center;\n        }\n\n        .quantity-controls {\n          display: flex;\n          align-items: center;\n          gap: 0.5rem;\n        }\n\n        .quantity {\n          min-width: 2rem;\n          text-align: center;\n          font-weight: bold;\n        }\n\n        .item-total {\n          font-weight: bold;\n          color: #2196f3;\n          text-align: right;\n        }\n\n        .cart-summary {\n          margin-top: 1rem;\n          padding-top: 1rem;\n          border-top: 2px solid #eee;\n        }\n\n        .payment-type-section {\n          margin-bottom: 1.5rem;\n        }\n\n        .payment-type-section h4 {\n          margin: 0 0 1rem 0;\n          color: #333;\n          font-size: 1rem;\n        }\n\n        .payment-options {\n          display: flex;\n          flex-direction: column;\n          gap: 0.5rem;\n        }\n\n        .payment-option {\n          display: flex;\n          align-items: center;\n          padding: 0.75rem;\n          border: 2px solid #e2e8f0;\n          border-radius: 8px;\n          cursor: pointer;\n          transition: all 0.2s;\n        }\n\n        .payment-option:hover {\n          border-color: #2196f3;\n          background: #f8faff;\n        }\n\n        .payment-option input[type=\"radio\"] {\n          margin-right: 0.75rem;\n          transform: scale(1.2);\n        }\n\n        .payment-option input[type=\"radio\"]:checked + .payment-label {\n          font-weight: 600;\n          color: #2196f3;\n        }\n\n        .payment-option:has(input[type=\"radio\"]:checked) {\n          border-color: #2196f3;\n          background: #f0f7ff;\n          box-shadow: 0 2px 8px rgba(33, 150, 243, 0.1);\n        }\n\n        .payment-label {\n          font-size: 0.9rem;\n          color: #333;\n        }\n\n        .deposit-info {\n          margin-top: 1rem;\n          padding: 0.75rem;\n          background: #f0f7ff;\n          border-radius: 6px;\n          border-left: 3px solid #2196f3;\n        }\n\n        .deposit-info p {\n          margin: 0;\n          font-size: 0.85rem;\n          color: #1976d2;\n          font-weight: 500;\n        }\n\n        .total-amount {\n          font-size: 1.2rem;\n          margin-bottom: 1rem;\n          text-align: center;\n          color: #333;\n        }\n\n        .btn {\n          border: none;\n          border-radius: 4px;\n          padding: 0.5rem 1rem;\n          cursor: pointer;\n          font-size: 0.9rem;\n          transition: all 0.2s;\n          font-weight: 500;\n        }\n\n        .btn:hover:not(:disabled) {\n          transform: translateY(-1px);\n          box-shadow: 0 2px 8px rgba(0,0,0,0.2);\n        }\n\n        .btn:disabled {\n          opacity: 0.6;\n          cursor: not-allowed;\n        }\n\n        .btn-primary {\n          background: #2196f3;\n          color: white;\n        }\n\n        .btn-secondary {\n          background: #757575;\n          color: white;\n        }\n\n        .btn-success {\n          background: #4caf50;\n          color: white;\n        }\n\n        .btn-danger {\n          background: #f44336;\n          color: white;\n        }\n\n        .btn-small {\n          padding: 0.25rem 0.5rem;\n          font-size: 0.8rem;\n        }\n\n        .btn-large {\n          padding: 0.75rem 2rem;\n          font-size: 1rem;\n          width: 100%;\n        }\n\n        @media (max-width: 768px) {\n          .order-content {\n            grid-template-columns: 1fr;\n          }\n\n          .menu-grid {\n            grid-template-columns: 1fr;\n          }\n\n          .cart-section {\n            position: static;\n          }\n\n          .cart-item {\n            grid-template-columns: 1fr;\n            gap: 0.5rem;\n          }\n\n          .item-controls {\n            flex-direction: row;\n            justify-content: space-between;\n          }\n        }\n      `}</style>\n    </div>\n  );\n};\n\nexport default OrderSystem;"],"names":["_ref","onOrderComplete","menus","setMenus","useState","cart","setCart","loading","setLoading","error","setError","success","setSuccess","menuRecipes","setMenuRecipes","menuAvailability","setMenuAvailability","selectedPaymentType","setSelectedPaymentType","loadMenus","useCallback","async","menuData","MenuService","getAllMenus","recipes","menu","id","getRecipesByMenuId","err","checkMenuAvailability","availability","_cart$find","length","available","reason","cartQuantity","find","item","menu_id","quantity","canMake","limitingIngredient","maxQuantity","Infinity","recipe","inventory","InventoryService","getInventoryByIngredientId","ingredient_id","concat","ingredient_name","requiredForOne","alreadyUsed","availableStock","current_stock","possibleQuantity","Math","floor","useEffect","updateQuantity","menuId","newQuantity","removeFromCart","map","_objectSpread","filter","calculateTotal","reduce","total","unit_price","_jsxs","className","children","_jsx","isAvailable","cartItem","name","description","price","toLocaleString","ingredient_unit","onClick","setTimeout","newItem","Date","now","toString","order_id","menu_name","addToCart","disabled","clearCart","window","confirm","_Fragment","type","value","checked","onChange","e","target","SalesService","getPaymentTypeIcon","getPaymentTypeDisplayName","calculateExpectedDepositDate","toISOString","totalAmount","confirmMessage","join","orderItems","orderId","OrderService","createOrderWithItems","order","getOrderById","Error","message"],"sourceRoot":""}