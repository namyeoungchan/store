{"version":3,"file":"static/js/359.c91ff889.chunk.js","mappings":"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","sources":["utils/passwordUtils.ts","components/UserManagement/UserList.tsx","pages/UserManagementPage.tsx","services/userService.ts","components/ConfirmDialog.tsx"],"sourcesContent":["// 클라이언트 사이드에서 간단한 해싱 (실제 운영에서는 서버에서 처리해야 함)\nexport class PasswordUtils {\n\n  // 간단한 해시 함수 (실제로는 bcrypt 등을 서버에서 사용해야 함)\n  static async hashPassword(password: string): Promise<string> {\n    const encoder = new TextEncoder();\n    const data = encoder.encode(password + 'salt_for_store_system');\n    const hashBuffer = await crypto.subtle.digest('SHA-256', data);\n    const hashArray = Array.from(new Uint8Array(hashBuffer));\n    return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');\n  }\n\n  // 비밀번호 검증\n  static async verifyPassword(password: string, hash: string): Promise<boolean> {\n    const hashedInput = await this.hashPassword(password);\n    return hashedInput === hash;\n  }\n\n  // 임시 비밀번호 생성\n  static generateTempPassword(): string {\n    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n    let result = '';\n    for (let i = 0; i < 8; i++) {\n      result += chars.charAt(Math.floor(Math.random() * chars.length));\n    }\n    return result;\n  }\n\n  // 비밀번호 강도 검사\n  static validatePassword(password: string): { valid: boolean; errors: string[] } {\n    const errors: string[] = [];\n\n    if (password.length < 4) {\n      errors.push('비밀번호는 최소 4자리 이상이어야 합니다.');\n    }\n\n    if (password.length > 20) {\n      errors.push('비밀번호는 20자리를 초과할 수 없습니다.');\n    }\n\n    return {\n      valid: errors.length === 0,\n      errors\n    };\n  }\n}","import React from 'react';\nimport { User } from '../../types';\n\ninterface UserListProps {\n  users: User[];\n  onCreateUser: () => void;\n  onEditUser: (user: User) => void;\n  onDeleteUser: (user: User) => void;\n  onResetPassword?: (user: User) => void;\n}\n\nconst UserList: React.FC<UserListProps> = ({\n  users,\n  onCreateUser,\n  onEditUser,\n  onDeleteUser,\n  onResetPassword\n}) => {\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('ko-KR');\n  };\n\n  const formatSalary = (user: User) => {\n    if (user.salary_type === 'MONTHLY') {\n      return `월 ${user.monthly_salary?.toLocaleString() || 0}원`;\n    } else {\n      return `시급 ${user.hourly_wage?.toLocaleString() || 0}원`;\n    }\n  };\n\n  return (\n    <div className=\"modern-user-list\">\n      {/* Header with Actions */}\n      <div className=\"list-header-modern\">\n        <div className=\"header-left\">\n          <h2 className=\"list-title\">팀 멤버</h2>\n          <div className=\"list-stats\">\n            <span className=\"stat-item\">\n              <span className=\"stat-icon\">👤</span>\n              <span className=\"stat-text\">{users.length}명</span>\n            </span>\n            <span className=\"stat-item\">\n              <span className=\"stat-icon\">✅</span>\n              <span className=\"stat-text\">{users.filter(u => u.is_active).length}명 활성</span>\n            </span>\n          </div>\n        </div>\n        <button onClick={onCreateUser} className=\"modern-add-button\">\n          <svg className=\"add-icon\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\n            <line x1=\"12\" y1=\"5\" x2=\"12\" y2=\"19\"></line>\n            <line x1=\"5\" y1=\"12\" x2=\"19\" y2=\"12\"></line>\n          </svg>\n          <span>새 직원 추가</span>\n        </button>\n      </div>\n\n      {users.length === 0 ? (\n        <div className=\"modern-empty-state\">\n          <div className=\"empty-illustration\">\n            <div className=\"empty-circle\">\n              <svg width=\"80\" height=\"80\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"1\">\n                <path d=\"M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2\"></path>\n                <circle cx=\"12\" cy=\"7\" r=\"4\"></circle>\n              </svg>\n            </div>\n          </div>\n          <h3 className=\"empty-title\">아직 등록된 직원이 없어요</h3>\n          <p className=\"empty-description\">첫 번째 팀 멤버를 추가하여 시작해보세요</p>\n          <button onClick={onCreateUser} className=\"modern-primary-button\">\n            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\n              <line x1=\"12\" y1=\"5\" x2=\"12\" y2=\"19\"></line>\n              <line x1=\"5\" y1=\"12\" x2=\"19\" y2=\"12\"></line>\n            </svg>\n            첫 직원 등록하기\n          </button>\n        </div>\n      ) : (\n        <div className=\"modern-user-grid\">\n          {users.map((user, index) => (\n            <div\n              key={user.id}\n              className={`modern-user-card ${!user.is_active ? 'inactive' : ''}`}\n              style={{ animationDelay: `${index * 0.1}s` }}\n            >\n              {/* Card Header */}\n              <div className=\"card-header\">\n                <div className=\"user-avatar-modern\">\n                  <div className=\"avatar-gradient\">\n                    <span className=\"avatar-text\">{user.full_name.charAt(0)}</span>\n                  </div>\n                  <div className=\"status-indicator\">\n                    <div className={`status-dot ${user.is_active ? 'active' : 'inactive'}`}></div>\n                  </div>\n                </div>\n                <div className=\"user-info\">\n                  <h3 className=\"user-name\">{user.full_name}</h3>\n                  <span className=\"user-position\">{user.position}</span>\n                  <span className=\"user-id\">@{user.username}</span>\n                </div>\n                <div className=\"card-menu\">\n                  <button className=\"menu-trigger\">\n                    <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\n                      <circle cx=\"12\" cy=\"12\" r=\"1\"></circle>\n                      <circle cx=\"12\" cy=\"5\" r=\"1\"></circle>\n                      <circle cx=\"12\" cy=\"19\" r=\"1\"></circle>\n                    </svg>\n                  </button>\n                </div>\n              </div>\n\n              {/* Card Content */}\n              <div className=\"card-content\">\n                <div className=\"info-grid\">\n                  <div className=\"info-item\">\n                    <div className=\"info-icon\">\n                      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"1.5\">\n                        <path d=\"M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z\"></path>\n                        <polyline points=\"22,6 12,13 2,6\"></polyline>\n                      </svg>\n                    </div>\n                    <div className=\"info-text\">\n                      <span className=\"info-label\">이메일</span>\n                      <span className=\"info-value\">{user.email}</span>\n                    </div>\n                  </div>\n\n                  <div className=\"info-item\">\n                    <div className=\"info-icon\">\n                      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"1.5\">\n                        <path d=\"M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z\"></path>\n                      </svg>\n                    </div>\n                    <div className=\"info-text\">\n                      <span className=\"info-label\">연락처</span>\n                      <span className=\"info-value\">{user.phone}</span>\n                    </div>\n                  </div>\n\n                  <div className=\"info-item\">\n                    <div className=\"info-icon\">\n                      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"1.5\">\n                        <rect x=\"3\" y=\"4\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\"></rect>\n                        <line x1=\"16\" y1=\"2\" x2=\"16\" y2=\"6\"></line>\n                        <line x1=\"8\" y1=\"2\" x2=\"8\" y2=\"6\"></line>\n                        <line x1=\"3\" y1=\"10\" x2=\"21\" y2=\"10\"></line>\n                      </svg>\n                    </div>\n                    <div className=\"info-text\">\n                      <span className=\"info-label\">입사일</span>\n                      <span className=\"info-value\">{formatDate(user.hire_date)}</span>\n                    </div>\n                  </div>\n\n                  <div className=\"info-item\">\n                    <div className=\"info-icon\">\n                      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"1.5\">\n                        <line x1=\"12\" y1=\"1\" x2=\"12\" y2=\"23\"></line>\n                        <path d=\"M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6\"></path>\n                      </svg>\n                    </div>\n                    <div className=\"info-text\">\n                      <span className=\"info-label\">급여</span>\n                      <span className=\"info-value wage\">{formatSalary(user)}</span>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Login Status */}\n                <div className=\"login-status\">\n                  <div className=\"status-item\">\n                    <span className=\"status-label\">로그인 권한</span>\n                    <div className={`status-badge ${user.password_hash ? 'enabled' : 'disabled'}`}>\n                      <div className=\"badge-dot\"></div>\n                      {user.password_hash ? '활성' : '비활성'}\n                      {user.password_hash && user.is_password_temp && (\n                        <span className=\"temp-badge\">임시</span>\n                      )}\n                    </div>\n                  </div>\n                  {user.last_login && (\n                    <div className=\"last-login\">\n                      마지막 로그인: {formatDate(user.last_login)}\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              {/* Card Actions */}\n              <div className=\"card-actions\">\n                <button\n                  onClick={() => onEditUser(user)}\n                  className=\"action-button edit\"\n                  title=\"편집\"\n                >\n                  <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\n                    <path d=\"M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7\"></path>\n                    <path d=\"M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z\"></path>\n                  </svg>\n                  <span>편집</span>\n                </button>\n\n                {user.password_hash && onResetPassword && (\n                  <button\n                    onClick={() => onResetPassword(user)}\n                    className=\"action-button reset\"\n                    title=\"비밀번호 재설정\"\n                  >\n                    <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\n                      <polyline points=\"23 4 23 10 17 10\"></polyline>\n                      <polyline points=\"1 20 1 14 7 14\"></polyline>\n                      <path d=\"M20.49 9A9 9 0 0 0 5.64 5.64L1 10m22 4l-4.64 4.36A9 9 0 0 1 3.51 15\"></path>\n                    </svg>\n                    <span>비밀번호</span>\n                  </button>\n                )}\n\n                <button\n                  onClick={() => onDeleteUser(user)}\n                  className=\"action-button delete\"\n                  title=\"삭제\"\n                >\n                  <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\n                    <polyline points=\"3,6 5,6 21,6\"></polyline>\n                    <path d=\"M19,6V20a2,2,0,0,1-2,2H7a2,2,0,0,1-2-2V6M8,6V4a2,2,0,0,1,2-2h4a2,2,0,0,1,2,2V6\"></path>\n                  </svg>\n                  <span>삭제</span>\n                </button>\n              </div>\n\n              {/* Card Footer */}\n              <div className=\"card-footer\">\n                <span className=\"registration-date\">\n                  등록일: {formatDate(user.created_at || '')}\n                </span>\n              </div>\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default UserList;","import React, { useState, useEffect, Suspense, lazy } from 'react';\nimport { User, UserWithSchedule } from '../types';\nimport { UserService } from '../services/userService';\nimport UserList from '../components/UserManagement/UserList'; // 기본 탭이므로 즉시 로드\nimport ConfirmDialog from '../components/ConfirmDialog'; // 작은 컴포넌트이므로 즉시 로드\nimport '../styles/components/ModernEmployeeManagement.css';\n\n// 조건부 렌더링되는 큰 컴포넌트들은 lazy loading 적용\nconst UserForm = lazy(() => import('../components/UserManagement/UserForm'));\nconst ScheduleManagement = lazy(() => import('../components/UserManagement/ScheduleManagement'));\nconst FixedScheduleManagement = lazy(() => import('../components/UserManagement/FixedScheduleManagement'));\nconst WorkTimeAnalysis = lazy(() => import('../components/UserManagement/WorkTimeAnalysis'));\n\ntype TabType = 'users' | 'schedule' | 'fixed-schedule' | 'analysis';\n\nconst UserManagementPage: React.FC = () => {\n  const [activeTab, setActiveTab] = useState<TabType>('users');\n  const [users, setUsers] = useState<User[]>([]);\n  const [usersWithSchedule, setUsersWithSchedule] = useState<UserWithSchedule[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [showUserForm, setShowUserForm] = useState(false);\n  const [showConfirmDialog, setShowConfirmDialog] = useState(false);\n  const [userToDelete, setUserToDelete] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    loadUsers();\n  }, []);\n\n  const loadUsers = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const [allUsers, usersWithSched] = await Promise.all([\n        UserService.getAllUsers(),\n        UserService.getUsersWithCurrentSchedule()\n      ]);\n      setUsers(allUsers);\n      setUsersWithSchedule(usersWithSched);\n    } catch (err) {\n      setError('사용자 정보를 불러오는데 실패했습니다.');\n      console.error('Error loading users:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleCreateUser = () => {\n    setSelectedUser(null);\n    setShowUserForm(true);\n  };\n\n  const handleEditUser = (user: User) => {\n    setSelectedUser(user);\n    setShowUserForm(true);\n  };\n\n  const handleDeleteUser = (user: User) => {\n    setUserToDelete(user);\n    setShowConfirmDialog(true);\n  };\n\n  const confirmDeleteUser = async () => {\n    if (!userToDelete) return;\n\n    try {\n      await UserService.deleteUser(userToDelete.id!);\n      await loadUsers();\n      setShowConfirmDialog(false);\n      setUserToDelete(null);\n    } catch (err) {\n      setError('사용자 삭제에 실패했습니다.');\n      console.error('Error deleting user:', err);\n    }\n  };\n\n  const handleUserFormSubmit = async (userData: Omit<User, 'id' | 'created_at' | 'updated_at'>, generateLogin?: boolean) => {\n    try {\n      if (selectedUser) {\n        // 기존 사용자 업데이트\n        await UserService.updateUser(selectedUser.id!, userData);\n\n        // 로그인 권한 변경이 있으면 처리\n        if (generateLogin !== undefined) {\n          const hasCurrentAccess = !!selectedUser.password_hash;\n          if (generateLogin !== hasCurrentAccess) {\n            await UserService.toggleUserLoginAccess(selectedUser.id!, generateLogin);\n          }\n        }\n      } else {\n        // 새 사용자 생성\n        const newUser = await UserService.createUser(userData, generateLogin);\n\n        // 로그인 권한이 부여되었고 임시 비밀번호가 있으면 알림\n        if (generateLogin && newUser.password_temp) {\n          alert(`직원이 등록되었습니다.\\n\\n임시 로그인 정보:\\n이메일: ${newUser.email}\\n비밀번호: ${newUser.password_temp}\\n\\n이 정보를 직원에게 안전하게 전달해주세요.`);\n        }\n      }\n\n      await loadUsers();\n      setShowUserForm(false);\n      setSelectedUser(null);\n    } catch (err) {\n      setError('사용자 정보 저장에 실패했습니다.');\n      console.error('Error saving user:', err);\n    }\n  };\n\n  const handleResetPassword = async (user: User) => {\n    const confirmReset = window.confirm(`\"${user.full_name}\" 직원의 비밀번호를 재설정하시겠습니까?\\n새로운 임시 비밀번호가 생성됩니다.`);\n\n    if (confirmReset) {\n      try {\n        const newTempPassword = await UserService.resetPassword(user.id!);\n        alert(`비밀번호가 재설정되었습니다.\\n\\n새로운 임시 비밀번호: ${newTempPassword}\\n\\n이 정보를 직원에게 안전하게 전달해주세요.`);\n        await loadUsers();\n      } catch (err) {\n        setError('비밀번호 재설정에 실패했습니다.');\n        console.error('Error resetting password:', err);\n      }\n    }\n  };\n\n  // 컴포넌트 로딩을 위한 fallback\n  const ComponentLoader = () => (\n    <div className=\"component-loading\">\n      <div className=\"loading-spinner\"></div>\n      <p>컴포넌트를 불러오는 중...</p>\n    </div>\n  );\n\n  if (loading) {\n    return (\n      <div className=\"loading-container\">\n        <div className=\"loading-spinner\"></div>\n        <p>사용자 정보를 불러오는 중...</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"user-management-modern\">\n      {/* Background Effects */}\n      <div className=\"background-effects\">\n        <div className=\"gradient-orb orb-1\"></div>\n        <div className=\"gradient-orb orb-2\"></div>\n        <div className=\"gradient-orb orb-3\"></div>\n      </div>\n\n      {/* Header Section */}\n      <div className=\"modern-header\">\n        <div className=\"header-content\">\n          <div className=\"header-text\">\n            <h1 className=\"modern-title\">\n              <span className=\"title-icon\">👥</span>\n              직원 관리\n            </h1>\n            <p className=\"modern-subtitle\">\n              팀원들의 정보와 스케줄을 스마트하게 관리하세요\n            </p>\n          </div>\n          <div className=\"header-stats\">\n            <div className=\"stat-card\">\n              <div className=\"stat-number\">{users.length}</div>\n              <div className=\"stat-label\">총 직원</div>\n            </div>\n            <div className=\"stat-card\">\n              <div className=\"stat-number\">{users.filter(u => u.is_active).length}</div>\n              <div className=\"stat-label\">활성 직원</div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Error Toast */}\n      {error && (\n        <div className=\"error-toast\">\n          <div className=\"error-content\">\n            <span className=\"error-icon\">⚠️</span>\n            <span className=\"error-text\">{error}</span>\n            <button onClick={() => setError(null)} className=\"error-close\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\n                <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"></line>\n                <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"></line>\n              </svg>\n            </button>\n          </div>\n        </div>\n      )}\n\n      {/* Modern Tab Navigation */}\n      <div className=\"modern-tabs\">\n        <div className=\"tab-container\">\n          {[\n            { key: 'users', icon: '👤', label: '직원 관리', color: 'blue' },\n            { key: 'schedule', icon: '📅', label: '주간 스케줄', color: 'purple' },\n            { key: 'fixed-schedule', icon: '🔒', label: '고정 스케줄', color: 'orange' },\n            { key: 'analysis', icon: '📊', label: '근무 분석', color: 'green' }\n          ].map(tab => (\n            <button\n              key={tab.key}\n              className={`modern-tab ${activeTab === tab.key ? 'active' : ''} ${tab.color}`}\n              onClick={() => setActiveTab(tab.key as TabType)}\n            >\n              <span className=\"tab-icon\">{tab.icon}</span>\n              <span className=\"tab-label\">{tab.label}</span>\n              {activeTab === tab.key && <div className=\"tab-indicator\"></div>}\n            </button>\n          ))}\n        </div>\n      </div>\n\n      {/* Content Area */}\n      <div className=\"modern-content\">\n        <div className=\"content-wrapper\">\n          {activeTab === 'users' && (\n            <UserList\n              users={users}\n              onCreateUser={handleCreateUser}\n              onEditUser={handleEditUser}\n              onDeleteUser={handleDeleteUser}\n              onResetPassword={handleResetPassword}\n            />\n          )}\n\n          {activeTab === 'schedule' && (\n            <Suspense fallback={<ComponentLoader />}>\n              <ScheduleManagement\n                users={usersWithSchedule}\n                onScheduleUpdate={loadUsers}\n              />\n            </Suspense>\n          )}\n\n          {activeTab === 'fixed-schedule' && (\n            <Suspense fallback={<ComponentLoader />}>\n              <FixedScheduleManagement\n                users={users}\n              />\n            </Suspense>\n          )}\n\n          {activeTab === 'analysis' && (\n            <Suspense fallback={<ComponentLoader />}>\n              <WorkTimeAnalysis />\n            </Suspense>\n          )}\n        </div>\n      </div>\n\n      {/* Modern User Form Modal */}\n      {showUserForm && (\n        <Suspense fallback={<ComponentLoader />}>\n          <UserForm\n            user={selectedUser}\n            onSubmit={handleUserFormSubmit}\n            onCancel={() => {\n              setShowUserForm(false);\n              setSelectedUser(null);\n            }}\n          />\n        </Suspense>\n      )}\n\n      {/* Confirm Dialog */}\n      <ConfirmDialog\n        isOpen={showConfirmDialog}\n        title=\"직원 삭제 확인\"\n        message={`정말로 \"${userToDelete?.full_name}\" 직원을 삭제하시겠습니까? 이 작업은 되돌릴 수 없습니다.`}\n        onConfirm={confirmDeleteUser}\n        onCancel={() => {\n          setShowConfirmDialog(false);\n          setUserToDelete(null);\n        }}\n        confirmText=\"삭제\"\n        cancelText=\"취소\"\n        type=\"danger\"\n      />\n    </div>\n  );\n};\n\nexport default UserManagementPage;","import { supabase } from '../firebase/config';\nimport { User, UserWithSchedule } from '../types';\nimport { PasswordUtils } from '../utils/passwordUtils';\n\nexport class UserService {\n  private static tableName = 'users';\n\n  static async getAllUsers(): Promise<User[]> {\n    try {\n      const { data, error } = await supabase\n        .from(this.tableName)\n        .select('*')\n        .order('created_at', { ascending: false });\n\n      if (error) throw error;\n      return data || [];\n    } catch (error) {\n      console.error('Error getting all users:', error);\n      return [];\n    }\n  }\n\n  static async getUserById(id: string): Promise<User | null> {\n    try {\n      const { data, error } = await supabase\n        .from(this.tableName)\n        .select('*')\n        .eq('id', id)\n        .single();\n\n      if (error) throw error;\n      return data;\n    } catch (error) {\n      console.error('Error getting user by ID:', error);\n      return null;\n    }\n  }\n\n  static async createUser(user: Omit<User, 'id' | 'created_at' | 'updated_at'>, generateLogin: boolean = true): Promise<User> {\n    let passwordHash = null;\n    let passwordTemp = null;\n    let isPasswordTemp = false;\n\n    if (generateLogin) {\n      passwordTemp = PasswordUtils.generateTempPassword();\n      passwordHash = await PasswordUtils.hashPassword(passwordTemp);\n      isPasswordTemp = true;\n    }\n\n    const userData = {\n      ...user,\n      password_hash: passwordHash,\n      password_temp: passwordTemp,\n      is_password_temp: isPasswordTemp,\n      is_active: user.is_active ?? true,\n      hourly_wage: user.hourly_wage || 0,\n      monthly_salary: user.monthly_salary || 0,\n      salary_type: user.salary_type || 'HOURLY',\n    };\n\n    try {\n      const { data, error } = await supabase\n        .from(this.tableName)\n        .insert(userData)\n        .select()\n        .single();\n\n      if (error) {\n        if (error.code === '23505') {\n          throw new Error('이미 존재하는 사용자입니다.');\n        }\n        throw error;\n      }\n\n      const result = { ...data, password_temp: passwordTemp };\n      return result;\n    } catch (error) {\n      console.error('Error creating user:', error);\n      throw error;\n    }\n  }\n\n  static async updateUser(id: string, updates: Partial<Omit<User, 'id' | 'created_at'>>): Promise<User | null> {\n    try {\n      const { data, error } = await supabase\n        .from(this.tableName)\n        .update(updates)\n        .eq('id', id)\n        .select()\n        .single();\n\n      if (error) throw error;\n      return data;\n    } catch (error) {\n      console.error('Error updating user:', error);\n      throw error;\n    }\n  }\n\n  static async deleteUser(id: string): Promise<boolean> {\n    try {\n      const { error } = await supabase\n        .from(this.tableName)\n        .delete()\n        .eq('id', id);\n\n      if (error) throw error;\n      return true;\n    } catch (error) {\n      console.error('Error deleting user:', error);\n      return false;\n    }\n  }\n\n  static async getUsersWithCurrentSchedule(): Promise<UserWithSchedule[]> {\n    try {\n      const currentWeekStart = this.getCurrentWeekStart();\n      const { data: users, error } = await supabase\n        .from(this.tableName)\n        .select('*')\n        .eq('is_active', true);\n\n      if (error) throw error;\n      const usersWithSchedule: UserWithSchedule[] = [];\n\n      for (const user of users || []) {\n        const userWithSchedule = user as UserWithSchedule;\n\n        // 현재 주 스케줄 조회\n        const { data: schedules } = await supabase\n          .from('work_schedules')\n          .select('*')\n          .eq('user_id', user.id)\n          .eq('week_start_date', currentWeekStart);\n\n        if (schedules && schedules.length > 0) {\n          const schedule = schedules[0];\n          userWithSchedule.current_schedule = {\n            user_id: user.id!,\n            week_start_date: currentWeekStart,\n            monday_start: schedule.monday_start,\n            monday_end: schedule.monday_end,\n            tuesday_start: schedule.tuesday_start,\n            tuesday_end: schedule.tuesday_end,\n            wednesday_start: schedule.wednesday_start,\n            wednesday_end: schedule.wednesday_end,\n            thursday_start: schedule.thursday_start,\n            thursday_end: schedule.thursday_end,\n            friday_start: schedule.friday_start,\n            friday_end: schedule.friday_end,\n            saturday_start: schedule.saturday_start,\n            saturday_end: schedule.saturday_end,\n            sunday_start: schedule.sunday_start,\n            sunday_end: schedule.sunday_end,\n          };\n        }\n\n        // 주간 근무 시간 계산\n        const weeklyHours = await this.getUserWeeklyHours(user.id!, currentWeekStart);\n        userWithSchedule.total_hours_this_week = weeklyHours.total_hours;\n        userWithSchedule.total_pay_this_week = weeklyHours.total_pay;\n\n        usersWithSchedule.push(userWithSchedule);\n      }\n\n      return usersWithSchedule.sort((a, b) => a.full_name.localeCompare(b.full_name));\n    } catch (error) {\n      console.error('Error getting users with current schedule:', error);\n      return [];\n    }\n  }\n\n  private static getCurrentWeekStart(): string {\n    const today = new Date();\n    const dayOfWeek = today.getDay();\n    const diff = today.getDate() - dayOfWeek + (dayOfWeek === 0 ? -6 : 1);\n    const monday = new Date(today.setDate(diff));\n    return monday.toISOString().split('T')[0];\n  }\n\n  private static async getUserWeeklyHours(userId: string, weekStart: string): Promise<{total_hours: number, total_pay: number}> {\n    try {\n      const weekEnd = new Date(weekStart);\n      weekEnd.setDate(weekEnd.getDate() + 6);\n      const weekEndStr = weekEnd.toISOString().split('T')[0];\n\n      const { data: workRecords } = await supabase\n        .from('work_records')\n        .select('*')\n        .eq('user_id', userId)\n        .gte('work_date', weekStart)\n        .lte('work_date', weekEndStr);\n\n      const totalHours = (workRecords || []).reduce((sum, record) => sum + (record.total_hours || 0), 0);\n      const totalPay = (workRecords || []).reduce((sum, record) => sum + (record.total_pay || 0), 0);\n\n      return { total_hours: totalHours, total_pay: totalPay };\n    } catch (error) {\n      console.error('Error getting user weekly hours:', error);\n      return { total_hours: 0, total_pay: 0 };\n    }\n  }\n\n  // 로그인 관련 메서드들\n  static async getUserByEmail(email: string): Promise<User | null> {\n    try {\n      const { data, error } = await supabase\n        .from(this.tableName)\n        .select('*')\n        .eq('email', email)\n        .eq('is_active', true)\n        .single();\n\n      if (error) throw error;\n      return data;\n    } catch (error) {\n      console.error('Error getting user by email:', error);\n      return null;\n    }\n  }\n\n  static async authenticateUser(email: string, password: string): Promise<User | null> {\n    const user = await this.getUserByEmail(email);\n    if (!user || !user.password_hash) return null;\n\n    const isValid = await PasswordUtils.verifyPassword(password, user.password_hash);\n    if (!isValid) return null;\n\n    // 로그인 시간 업데이트\n    await this.updateLastLogin(user.id!);\n\n    return user;\n  }\n\n  static async updateLastLogin(userId: string): Promise<void> {\n    try {\n      const { error } = await supabase\n        .from(this.tableName)\n        .update({ last_login: new Date().toISOString() })\n        .eq('id', userId);\n\n      if (error) throw error;\n    } catch (error) {\n      console.error('Error updating last login:', error);\n    }\n  }\n\n  static async resetPassword(userId: string): Promise<string> {\n    const tempPassword = PasswordUtils.generateTempPassword();\n    const passwordHash = await PasswordUtils.hashPassword(tempPassword);\n\n    try {\n      const { error } = await supabase\n        .from(this.tableName)\n        .update({\n          password_hash: passwordHash,\n          password_temp: tempPassword,\n          is_password_temp: true\n        })\n        .eq('id', userId);\n\n      if (error) throw error;\n      return tempPassword;\n    } catch (error) {\n      console.error('Error resetting password:', error);\n      throw error;\n    }\n  }\n\n  static async changePassword(userId: string, newPassword: string): Promise<boolean> {\n    const validation = PasswordUtils.validatePassword(newPassword);\n    if (!validation.valid) {\n      throw new Error(validation.errors.join(', '));\n    }\n\n    const passwordHash = await PasswordUtils.hashPassword(newPassword);\n\n    try {\n      const { error } = await supabase\n        .from(this.tableName)\n        .update({\n          password_hash: passwordHash,\n          password_temp: null,\n          is_password_temp: false\n        })\n        .eq('id', userId);\n\n      if (error) throw error;\n      return true;\n    } catch (error) {\n      console.error('Error changing password:', error);\n      throw error;\n    }\n  }\n\n  static async toggleUserLoginAccess(userId: string, hasAccess: boolean): Promise<void> {\n    try {\n      if (hasAccess) {\n        // 로그인 권한 부여 - 임시 비밀번호 생성\n        const tempPassword = PasswordUtils.generateTempPassword();\n        const passwordHash = await PasswordUtils.hashPassword(tempPassword);\n\n        const { error } = await supabase\n          .from(this.tableName)\n          .update({\n            password_hash: passwordHash,\n            password_temp: tempPassword,\n            is_password_temp: true\n          })\n          .eq('id', userId);\n\n        if (error) throw error;\n      } else {\n        // 로그인 권한 제거\n        const { error } = await supabase\n          .from(this.tableName)\n          .update({\n            password_hash: null,\n            password_temp: null,\n            is_password_temp: true\n          })\n          .eq('id', userId);\n\n        if (error) throw error;\n      }\n    } catch (error) {\n      console.error('Error toggling user login access:', error);\n      throw error;\n    }\n  }\n\n}","import React from 'react';\n\ninterface ConfirmDialogProps {\n  isOpen: boolean;\n  title: string;\n  message: string;\n  confirmText?: string;\n  cancelText?: string;\n  onConfirm: () => void;\n  onCancel: () => void;\n  type?: 'warning' | 'danger' | 'info';\n}\n\nconst ConfirmDialog: React.FC<ConfirmDialogProps> = ({\n  isOpen,\n  title,\n  message,\n  confirmText = '확인',\n  cancelText = '취소',\n  onConfirm,\n  onCancel,\n  type = 'warning'\n}) => {\n  if (!isOpen) return null;\n\n  const handleBackdropClick = (e: React.MouseEvent) => {\n    if (e.target === e.currentTarget) {\n      onCancel();\n    }\n  };\n\n  return (\n    <div className=\"dialog-overlay\" onClick={handleBackdropClick}>\n      <div className={`dialog-content dialog-${type}`}>\n        <div className=\"dialog-header\">\n          <h3 className=\"dialog-title\">{title}</h3>\n        </div>\n\n        <div className=\"dialog-body\">\n          <p className=\"dialog-message\">{message}</p>\n        </div>\n\n        <div className=\"dialog-footer\">\n          <button className=\"btn btn-secondary\" onClick={onCancel}>\n            {cancelText}\n          </button>\n          <button className={`btn btn-${type === 'danger' ? 'danger' : 'primary'}`} onClick={onConfirm}>\n            {confirmText}\n          </button>\n        </div>\n      </div>\n\n      <style>{`\n        .dialog-overlay {\n          position: fixed;\n          top: 0;\n          left: 0;\n          right: 0;\n          bottom: 0;\n          background-color: rgba(0, 0, 0, 0.5);\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          z-index: 1000;\n          backdrop-filter: blur(2px);\n        }\n\n        .dialog-content {\n          background: white;\n          border-radius: 12px;\n          min-width: 400px;\n          max-width: 500px;\n          box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);\n          animation: dialogSlideIn 0.3s ease-out;\n        }\n\n        @keyframes dialogSlideIn {\n          from {\n            opacity: 0;\n            transform: translateY(-50px) scale(0.9);\n          }\n          to {\n            opacity: 1;\n            transform: translateY(0) scale(1);\n          }\n        }\n\n        .dialog-header {\n          padding: 1.5rem 1.5rem 0 1.5rem;\n          border-bottom: 1px solid #eee;\n          margin-bottom: 1rem;\n        }\n\n        .dialog-title {\n          margin: 0;\n          font-size: 1.25rem;\n          font-weight: 600;\n          color: #333;\n        }\n\n        .dialog-warning .dialog-title {\n          color: #f57c00;\n        }\n\n        .dialog-danger .dialog-title {\n          color: #d32f2f;\n        }\n\n        .dialog-info .dialog-title {\n          color: #2196f3;\n        }\n\n        .dialog-body {\n          padding: 0 1.5rem 1.5rem;\n        }\n\n        .dialog-message {\n          margin: 0;\n          line-height: 1.5;\n          color: #555;\n          white-space: pre-line;\n        }\n\n        .dialog-footer {\n          padding: 1rem 1.5rem 1.5rem;\n          display: flex;\n          justify-content: flex-end;\n          gap: 0.75rem;\n        }\n\n        .btn {\n          border: none;\n          border-radius: 6px;\n          padding: 0.75rem 1.5rem;\n          cursor: pointer;\n          font-size: 0.9rem;\n          font-weight: 500;\n          transition: all 0.2s;\n          min-width: 80px;\n        }\n\n        .btn:hover {\n          transform: translateY(-1px);\n          box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n        }\n\n        .btn-primary {\n          background: #2196f3;\n          color: white;\n        }\n\n        .btn-primary:hover {\n          background: #1976d2;\n        }\n\n        .btn-secondary {\n          background: #f5f5f5;\n          color: #666;\n          border: 1px solid #ddd;\n        }\n\n        .btn-secondary:hover {\n          background: #eee;\n        }\n\n        .btn-danger {\n          background: #f44336;\n          color: white;\n        }\n\n        .btn-danger:hover {\n          background: #d32f2f;\n        }\n\n        @media (max-width: 500px) {\n          .dialog-content {\n            min-width: auto;\n            width: 90vw;\n            margin: 1rem;\n          }\n\n          .dialog-footer {\n            flex-direction: column-reverse;\n          }\n\n          .btn {\n            width: 100%;\n          }\n        }\n      `}</style>\n    </div>\n  );\n};\n\nexport default ConfirmDialog;"],"names":["PasswordUtils","hashPassword","password","data","TextEncoder","encode","hashBuffer","crypto","subtle","digest","Array","from","Uint8Array","map","b","toString","padStart","join","verifyPassword","hash","this","generateTempPassword","chars","result","i","charAt","Math","floor","random","validatePassword","errors","length","push","valid","_ref","users","onCreateUser","onEditUser","onDeleteUser","onResetPassword","formatDate","dateString","Date","toLocaleDateString","formatSalary","user","_user$monthly_salary","_user$hourly_wage","salary_type","concat","monthly_salary","toLocaleString","hourly_wage","_jsxs","className","children","_jsx","filter","u","is_active","onClick","width","height","viewBox","fill","stroke","strokeWidth","x1","y1","x2","y2","d","cx","cy","r","index","style","animationDelay","full_name","position","username","points","email","phone","x","y","rx","ry","hire_date","password_hash","is_password_temp","last_login","title","created_at","id","UserForm","lazy","ScheduleManagement","FixedScheduleManagement","WorkTimeAnalysis","UserManagementPage","activeTab","setActiveTab","useState","setUsers","usersWithSchedule","setUsersWithSchedule","selectedUser","setSelectedUser","showUserForm","setShowUserForm","showConfirmDialog","setShowConfirmDialog","userToDelete","setUserToDelete","loading","setLoading","error","setError","useEffect","loadUsers","async","allUsers","usersWithSched","Promise","all","UserService","getAllUsers","getUsersWithCurrentSchedule","err","console","ComponentLoader","key","icon","label","color","tab","UserList","handleCreateUser","window","confirm","newTempPassword","resetPassword","alert","Suspense","fallback","onScheduleUpdate","onSubmit","userData","generateLogin","updateUser","undefined","toggleUserLoginAccess","newUser","createUser","password_temp","onCancel","ConfirmDialog","isOpen","message","onConfirm","deleteUser","confirmText","cancelText","type","supabase","tableName","select","order","ascending","getUserById","eq","single","_user$is_active","passwordHash","passwordTemp","isPasswordTemp","arguments","_objectSpread","insert","code","Error","updates","update","delete","currentWeekStart","getCurrentWeekStart","userWithSchedule","schedules","schedule","current_schedule","user_id","week_start_date","monday_start","monday_end","tuesday_start","tuesday_end","wednesday_start","wednesday_end","thursday_start","thursday_end","friday_start","friday_end","saturday_start","saturday_end","sunday_start","sunday_end","weeklyHours","getUserWeeklyHours","total_hours_this_week","total_hours","total_pay_this_week","total_pay","sort","a","localeCompare","today","dayOfWeek","getDay","diff","getDate","setDate","toISOString","split","userId","weekStart","weekEnd","weekEndStr","workRecords","gte","lte","totalHours","reduce","sum","record","getUserByEmail","authenticateUser","updateLastLogin","tempPassword","changePassword","newPassword","validation","hasAccess","e","target","currentTarget"],"sourceRoot":""}