{"version":3,"file":"static/js/472.e88200e6.chunk.js","mappings":"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","sources":["components/OrderManagement.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Order, OrderItemWithDetails } from '../types';\nimport { OrderService } from '../services/orderService';\nimport { MenuService } from '../services/menuService';\nimport { InventoryService } from '../services/inventoryService';\n\ninterface OrderManagementProps {\n  onOrderUpdate?: () => void;\n}\n\nconst OrderManagement: React.FC<OrderManagementProps> = ({ onOrderUpdate }) => {\n  const [orders, setOrders] = useState<Order[]>([]);\n  const [selectedOrder, setSelectedOrder] = useState<Order | null>(null);\n  const [orderItems, setOrderItems] = useState<OrderItemWithDetails[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n\n  useEffect(() => {\n    loadOrders();\n  }, []);\n\n  const loadOrders = async () => {\n    try {\n      const orderData = await OrderService.getAllOrders();\n      // 최근 주문부터 표시\n      setOrders(orderData.sort((a, b) =>\n        new Date(b.order_date || 0).getTime() - new Date(a.order_date || 0).getTime()\n      ));\n    } catch (err) {\n      setError('주문 목록을 불러오는데 실패했습니다.');\n    }\n  };\n\n  const loadOrderItems = async (orderId: string) => {\n    try {\n      const items = await OrderService.getOrderItemsWithDetails(orderId);\n      setOrderItems(items);\n    } catch (err) {\n      setError('주문 상세 정보를 불러오는데 실패했습니다.');\n    }\n  };\n\n  const selectOrder = (order: Order) => {\n    setSelectedOrder(order);\n    loadOrderItems(order.id!);\n  };\n\n  const cancelOrder = async (order: Order) => {\n    const confirmMessage = `\n주문 #${order.id}를 취소하시겠습니까?\n\n취소 시 사용된 재료가 재고에 다시 추가됩니다.\n이 작업은 되돌릴 수 없습니다.`;\n\n    if (!window.confirm(confirmMessage)) {\n      return;\n    }\n\n    setLoading(true);\n    setError('');\n\n    try {\n      // 주문 아이템들의 재료를 재고에 다시 추가\n      const items = await OrderService.getOrderItemsWithDetails(order.id!);\n\n      for (const item of items) {\n        const recipes = await MenuService.getRecipesByMenuId(item.menu_id);\n\n        for (const recipe of recipes) {\n          const returnAmount = recipe.quantity * item.quantity;\n          await InventoryService.adjustStock(\n            recipe.ingredient_id,\n            returnAmount,\n            'IN',\n            `주문 취소 #${order.id} - ${item.menu_name}`\n          );\n        }\n      }\n\n      // 주문 삭제\n      await OrderService.deleteOrder(order.id!);\n\n      setSuccess('주문이 성공적으로 취소되었습니다.');\n      await loadOrders();\n\n      if (selectedOrder?.id === order.id) {\n        setSelectedOrder(null);\n        setOrderItems([]);\n      }\n\n      if (onOrderUpdate) {\n        onOrderUpdate();\n      }\n\n    } catch (err) {\n      setError(err instanceof Error ? err.message : '주문 취소 중 오류가 발생했습니다.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const modifyOrderItemQuantity = async (\n    orderId: string,\n    itemId: string,\n    menuId: string,\n    currentQuantity: number,\n    newQuantity: number\n  ) => {\n    if (newQuantity <= 0) {\n      await removeOrderItem(orderId, itemId, menuId, currentQuantity);\n      return;\n    }\n\n    const quantityDiff = newQuantity - currentQuantity;\n    const confirmMessage = quantityDiff > 0\n      ? `수량을 ${currentQuantity}개에서 ${newQuantity}개로 증가시키시겠습니까?\\n(재고에서 추가로 차감됩니다)`\n      : `수량을 ${currentQuantity}개에서 ${newQuantity}개로 감소시키시겠습니까?\\n(재고에 반환됩니다)`;\n\n    if (!window.confirm(confirmMessage)) {\n      return;\n    }\n\n    setLoading(true);\n    setError('');\n\n    try {\n      // 재고 조정\n      const recipes = await MenuService.getRecipesByMenuId(menuId);\n\n      for (const recipe of recipes) {\n        const stockChange = recipe.quantity * Math.abs(quantityDiff);\n\n        if (quantityDiff > 0) {\n          // 수량 증가 - 재고 차감\n          const inventory = await InventoryService.getInventoryByIngredientId(recipe.ingredient_id);\n          if (!inventory || inventory.current_stock < stockChange) {\n            setError(`재고가 부족합니다: ${recipe.ingredient_name} (필요: ${stockChange}, 재고: ${inventory?.current_stock || 0})`);\n            setLoading(false);\n            return;\n          }\n\n          await InventoryService.adjustStock(\n            recipe.ingredient_id,\n            stockChange,\n            'OUT',\n            `주문 수정 #${orderId} - 수량 증가`\n          );\n        } else {\n          // 수량 감소 - 재고 반환\n          await InventoryService.adjustStock(\n            recipe.ingredient_id,\n            stockChange,\n            'IN',\n            `주문 수정 #${orderId} - 수량 감소`\n          );\n        }\n      }\n\n      // 주문 아이템 수량 업데이트\n      await OrderService.updateOrderItemQuantity(itemId, newQuantity);\n\n      // 주문 총액 재계산\n      const updatedItems = await OrderService.getOrderItemsWithDetails(orderId);\n      const newTotal = updatedItems.reduce((sum, item) => sum + (item.quantity * item.unit_price), 0);\n      await OrderService.updateOrderTotal(orderId, newTotal);\n\n      setSuccess('주문이 성공적으로 수정되었습니다.');\n      await loadOrders();\n      await loadOrderItems(orderId);\n\n      if (onOrderUpdate) {\n        onOrderUpdate();\n      }\n\n    } catch (err) {\n      setError(err instanceof Error ? err.message : '주문 수정 중 오류가 발생했습니다.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const removeOrderItem = async (orderId: string, itemId: string, menuId: string, quantity: number) => {\n    if (!window.confirm('이 메뉴를 주문에서 제거하시겠습니까?\\n재고가 반환됩니다.')) {\n      return;\n    }\n\n    setLoading(true);\n    setError('');\n\n    try {\n      // 재고 반환\n      const recipes = await MenuService.getRecipesByMenuId(menuId);\n\n      for (const recipe of recipes) {\n        const returnAmount = recipe.quantity * quantity;\n        await InventoryService.adjustStock(\n          recipe.ingredient_id,\n          returnAmount,\n          'IN',\n          `주문 아이템 제거 #${orderId}`\n        );\n      }\n\n      // 주문 아이템 삭제\n      await OrderService.deleteOrderItem(itemId);\n\n      // 주문 총액 재계산\n      const updatedItems = await OrderService.getOrderItemsWithDetails(orderId);\n      if (updatedItems.length === 0) {\n        // 모든 아이템이 제거되면 주문 삭제\n        await OrderService.deleteOrder(orderId);\n        setSelectedOrder(null);\n        setOrderItems([]);\n      } else {\n        const newTotal = updatedItems.reduce((sum, item) => sum + (item.quantity * item.unit_price), 0);\n        await OrderService.updateOrderTotal(orderId, newTotal);\n        await loadOrderItems(orderId);\n      }\n\n      setSuccess('주문 아이템이 제거되었습니다.');\n      await loadOrders();\n\n      if (onOrderUpdate) {\n        onOrderUpdate();\n      }\n\n    } catch (err) {\n      setError(err instanceof Error ? err.message : '아이템 제거 중 오류가 발생했습니다.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const formatDate = (dateString?: string) => {\n    if (!dateString) return '날짜 없음';\n    return new Date(dateString).toLocaleString('ko-KR', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  return (\n    <div className=\"order-management\">\n      <div className=\"management-header\">\n        <h2>📋 주문 관리</h2>\n        {error && <div className=\"alert alert-error\">{error}</div>}\n        {success && <div className=\"alert alert-success\">{success}</div>}\n      </div>\n\n      <div className=\"management-content\">\n        {/* 주문 목록 */}\n        <div className=\"orders-list\">\n          <h3>주문 목록 ({orders.length})</h3>\n          {orders.length === 0 ? (\n            <div className=\"empty-state\">\n              <p>주문이 없습니다.</p>\n            </div>\n          ) : (\n            <div className=\"orders-grid\">\n              {orders.map(order => (\n                <div\n                  key={order.id}\n                  className={`order-card ${selectedOrder?.id === order.id ? 'selected' : ''}`}\n                  onClick={() => selectOrder(order)}\n                >\n                  <div className=\"order-header\">\n                    <span className=\"order-id\">주문 #{order.id}</span>\n                    <span className=\"order-date\">{formatDate(order.order_date)}</span>\n                  </div>\n                  <div className=\"order-amount\">\n                    ₩{order.total_amount.toLocaleString()}\n                  </div>\n                  <button\n                    className=\"btn btn-danger btn-small\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      cancelOrder(order);\n                    }}\n                    disabled={loading}\n                  >\n                    취소\n                  </button>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n\n        {/* 주문 상세 */}\n        {selectedOrder && (\n          <div className=\"order-details\">\n            <h3>주문 상세 - #{selectedOrder.id}</h3>\n            <div className=\"order-info\">\n              <p><strong>주문 시간:</strong> {formatDate(selectedOrder.order_date)}</p>\n              <p><strong>총 금액:</strong> ₩{selectedOrder.total_amount.toLocaleString()}</p>\n            </div>\n\n            <div className=\"order-items\">\n              <h4>주문 메뉴</h4>\n              {orderItems.map(item => (\n                <div key={item.id} className=\"order-item\">\n                  <div className=\"item-info\">\n                    <h5>{item.menu_name}</h5>\n                    <p>단가: ₩{item.unit_price.toLocaleString()}</p>\n                  </div>\n                  <div className=\"item-controls\">\n                    <div className=\"quantity-controls\">\n                      <button\n                        className=\"btn btn-small\"\n                        onClick={() => modifyOrderItemQuantity(\n                          selectedOrder.id!,\n                          item.id!,\n                          item.menu_id,\n                          item.quantity,\n                          item.quantity - 1\n                        )}\n                        disabled={loading}\n                      >\n                        -\n                      </button>\n                      <span className=\"quantity\">{item.quantity}</span>\n                      <button\n                        className=\"btn btn-small\"\n                        onClick={() => modifyOrderItemQuantity(\n                          selectedOrder.id!,\n                          item.id!,\n                          item.menu_id,\n                          item.quantity,\n                          item.quantity + 1\n                        )}\n                        disabled={loading}\n                      >\n                        +\n                      </button>\n                    </div>\n                    <button\n                      className=\"btn btn-danger btn-small\"\n                      onClick={() => removeOrderItem(\n                        selectedOrder.id!,\n                        item.id!,\n                        item.menu_id,\n                        item.quantity\n                      )}\n                      disabled={loading}\n                    >\n                      제거\n                    </button>\n                  </div>\n                  <div className=\"item-total\">\n                    ₩{(item.quantity * item.unit_price).toLocaleString()}\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n      </div>\n\n      <style>{`\n        .order-management {\n          max-width: 1200px;\n          margin: 0 auto;\n          padding: 2rem;\n        }\n\n        .management-header {\n          margin-bottom: 2rem;\n        }\n\n        .management-header h2 {\n          margin: 0 0 1rem 0;\n          color: #333;\n        }\n\n        .alert {\n          padding: 0.75rem 1rem;\n          border-radius: 4px;\n          margin-bottom: 1rem;\n        }\n\n        .alert-error {\n          background-color: #ffeaea;\n          color: #d32f2f;\n          border: 1px solid #ffcdd2;\n        }\n\n        .alert-success {\n          background-color: #e8f5e8;\n          color: #4caf50;\n          border: 1px solid #c8e6c9;\n        }\n\n        .management-content {\n          display: grid;\n          grid-template-columns: 1fr 1fr;\n          gap: 2rem;\n        }\n\n        .orders-list h3, .order-details h3 {\n          margin: 0 0 1rem 0;\n          color: #333;\n        }\n\n        .empty-state {\n          text-align: center;\n          padding: 2rem;\n          color: #999;\n          background: white;\n          border-radius: 8px;\n          border: 1px solid #eee;\n        }\n\n        .orders-grid {\n          display: flex;\n          flex-direction: column;\n          gap: 1rem;\n        }\n\n        .order-card {\n          background: white;\n          border: 1px solid #ddd;\n          border-radius: 8px;\n          padding: 1rem;\n          cursor: pointer;\n          transition: all 0.2s;\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n        }\n\n        .order-card:hover {\n          border-color: #2196f3;\n          box-shadow: 0 2px 8px rgba(33, 150, 243, 0.2);\n        }\n\n        .order-card.selected {\n          border-color: #2196f3;\n          background-color: #f3f9ff;\n          box-shadow: 0 2px 8px rgba(33, 150, 243, 0.3);\n        }\n\n        .order-header {\n          display: flex;\n          flex-direction: column;\n          gap: 0.25rem;\n        }\n\n        .order-id {\n          font-weight: bold;\n          color: #333;\n        }\n\n        .order-date {\n          font-size: 0.85rem;\n          color: #666;\n        }\n\n        .order-amount {\n          font-size: 1.1rem;\n          font-weight: bold;\n          color: #2196f3;\n        }\n\n        .order-details {\n          background: white;\n          border-radius: 8px;\n          padding: 1.5rem;\n          box-shadow: 0 2px 8px rgba(0,0,0,0.1);\n        }\n\n        .order-info {\n          background: #f8f9fa;\n          padding: 1rem;\n          border-radius: 4px;\n          margin-bottom: 1.5rem;\n        }\n\n        .order-info p {\n          margin: 0.5rem 0;\n        }\n\n        .order-items h4 {\n          margin: 0 0 1rem 0;\n          color: #333;\n        }\n\n        .order-item {\n          display: grid;\n          grid-template-columns: 1fr auto auto;\n          gap: 1rem;\n          align-items: center;\n          padding: 1rem 0;\n          border-bottom: 1px solid #eee;\n        }\n\n        .order-item:last-child {\n          border-bottom: none;\n        }\n\n        .item-info h5 {\n          margin: 0 0 0.25rem 0;\n          font-size: 1rem;\n        }\n\n        .item-info p {\n          margin: 0;\n          color: #666;\n          font-size: 0.9rem;\n        }\n\n        .item-controls {\n          display: flex;\n          flex-direction: column;\n          gap: 0.5rem;\n          align-items: center;\n        }\n\n        .quantity-controls {\n          display: flex;\n          align-items: center;\n          gap: 0.5rem;\n        }\n\n        .quantity {\n          min-width: 2rem;\n          text-align: center;\n          font-weight: bold;\n        }\n\n        .item-total {\n          font-weight: bold;\n          color: #2196f3;\n          text-align: right;\n        }\n\n        .btn {\n          border: none;\n          border-radius: 4px;\n          padding: 0.5rem 1rem;\n          cursor: pointer;\n          font-size: 0.9rem;\n          transition: all 0.2s;\n          font-weight: 500;\n        }\n\n        .btn:hover:not(:disabled) {\n          transform: translateY(-1px);\n          box-shadow: 0 2px 8px rgba(0,0,0,0.2);\n        }\n\n        .btn:disabled {\n          opacity: 0.6;\n          cursor: not-allowed;\n        }\n\n        .btn-danger {\n          background: #f44336;\n          color: white;\n        }\n\n        .btn-small {\n          padding: 0.25rem 0.5rem;\n          font-size: 0.8rem;\n        }\n\n        @media (max-width: 768px) {\n          .management-content {\n            grid-template-columns: 1fr;\n          }\n\n          .order-card {\n            flex-direction: column;\n            align-items: flex-start;\n            gap: 0.5rem;\n          }\n\n          .order-item {\n            grid-template-columns: 1fr;\n            gap: 0.5rem;\n          }\n\n          .item-controls {\n            flex-direction: row;\n            justify-content: space-between;\n            width: 100%;\n          }\n        }\n      `}</style>\n    </div>\n  );\n};\n\nexport default OrderManagement;"],"names":["_ref","onOrderUpdate","orders","setOrders","useState","selectedOrder","setSelectedOrder","orderItems","setOrderItems","loading","setLoading","error","setError","success","setSuccess","useEffect","loadOrders","async","orderData","OrderService","getAllOrders","sort","a","b","Date","order_date","getTime","err","loadOrderItems","items","getOrderItemsWithDetails","orderId","modifyOrderItemQuantity","itemId","menuId","currentQuantity","newQuantity","removeOrderItem","quantityDiff","confirmMessage","concat","window","confirm","recipes","MenuService","getRecipesByMenuId","recipe","stockChange","quantity","Math","abs","inventory","InventoryService","getInventoryByIngredientId","ingredient_id","current_stock","ingredient_name","adjustStock","updateOrderItemQuantity","newTotal","reduce","sum","item","unit_price","updateOrderTotal","Error","message","returnAmount","deleteOrderItem","updatedItems","length","deleteOrder","formatDate","dateString","toLocaleString","year","month","day","hour","minute","_jsxs","className","children","_jsx","map","order","id","onClick","selectOrder","total_amount","e","stopPropagation","menu_id","menu_name","cancelOrder","disabled"],"sourceRoot":""}