{"version":3,"file":"static/js/987.bd9ec1bc.chunk.js","mappings":"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","sources":["components/InventoryForm.tsx","components/InventoryHistory.tsx","pages/InventoryPage.tsx","components/Toast.tsx","components/LoadingSpinner.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { InventoryWithDetails } from '../types';\nimport '../styles/components/InventoryForm.css';\n\ninterface InventoryFormProps {\n  inventory: InventoryWithDetails;\n  onUpdateStock: (ingredientId: string, quantity: number, type: 'IN' | 'OUT', notes?: string) => void;\n  onUpdateMinStock: (ingredientId: string, minStock: number) => void;\n}\n\nexport const InventoryForm: React.FC<InventoryFormProps> = ({\n  inventory,\n  onUpdateStock,\n  onUpdateMinStock\n}) => {\n  const [quantity, setQuantity] = useState('');\n  const [changeType, setChangeType] = useState<'IN' | 'OUT'>('IN');\n  const [notes, setNotes] = useState('');\n  const [minStock, setMinStock] = useState(inventory.min_stock.toString());\n  const [activeTab, setActiveTab] = useState<'stock' | 'minstock'>('stock');\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Update minStock when inventory changes\n  useEffect(() => {\n    setMinStock(inventory.min_stock.toString());\n  }, [inventory.min_stock]);\n\n  const handleStockUpdate = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    const quantityValue = parseFloat(quantity);\n    if (isNaN(quantityValue) || quantityValue <= 0) {\n      alert('올바른 수량을 입력하세요.');\n      setIsLoading(false);\n      return;\n    }\n\n    try {\n      await onUpdateStock(inventory.ingredient_id, quantityValue, changeType, notes.trim() || undefined);\n      setQuantity('');\n      setNotes('');\n    } catch (error) {\n      console.error('재고 업데이트 실패:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleMinStockUpdate = async () => {\n    setIsLoading(true);\n    const minStockValue = parseFloat(minStock);\n    if (isNaN(minStockValue) || minStockValue < 0) {\n      alert('올바른 최소 재고량을 입력하세요.');\n      setIsLoading(false);\n      return;\n    }\n\n    try {\n      await onUpdateMinStock(inventory.ingredient_id, minStockValue);\n    } catch (error) {\n      console.error('최소 재고 업데이트 실패:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const isLowStock = inventory.current_stock <= inventory.min_stock;\n  const isOutOfStock = inventory.current_stock === 0;\n\n  const getStockStatus = () => {\n    if (isOutOfStock) return 'out';\n    if (isLowStock) return 'low';\n    return 'good';\n  };\n\n  const getStockStatusColor = () => {\n    const status = getStockStatus();\n    switch (status) {\n      case 'out': return '#ef4444';\n      case 'low': return '#f59e0b';\n      default: return '#10b981';\n    }\n  };\n\n  const getStockStatusText = () => {\n    const status = getStockStatus();\n    switch (status) {\n      case 'out': return '품절';\n      case 'low': return '부족';\n      default: return '충분';\n    }\n  };\n\n  const quickQuantities = [1, 5, 10, 50];\n\n  return (\n    <div className=\"modern-inventory-form\">\n      {/* Current Stock Display */}\n      <div className=\"stock-overview\">\n        <div className=\"stock-info\">\n          <div className=\"stock-display\">\n            <div className=\"stock-number\">{inventory.current_stock}</div>\n            <div className=\"stock-unit\">{inventory.ingredient_unit}</div>\n          </div>\n          <div className=\"stock-details\">\n            <div className=\"stock-label\">현재 재고</div>\n            <div className={`stock-status ${getStockStatus()}`}>\n              <span className=\"status-dot\" style={{ backgroundColor: getStockStatusColor() }}></span>\n              {getStockStatusText()}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"stock-progress\">\n          <div className=\"progress-info\">\n            <span className=\"current-label\">현재</span>\n            <span className=\"min-label\">최소: {inventory.min_stock}{inventory.ingredient_unit}</span>\n          </div>\n          <div className=\"progress-bar\">\n            <div\n              className=\"progress-fill\"\n              style={{\n                width: `${Math.min((inventory.current_stock / (inventory.min_stock * 2)) * 100, 100)}%`,\n                backgroundColor: getStockStatusColor()\n              }}\n            ></div>\n          </div>\n        </div>\n      </div>\n\n      {/* Tab Navigation */}\n      <div className=\"form-tabs\">\n        <button\n          className={`tab-btn ${activeTab === 'stock' ? 'active' : ''}`}\n          onClick={() => setActiveTab('stock')}\n        >\n          <span className=\"tab-icon\">📦</span>\n          재고 관리\n        </button>\n        <button\n          className={`tab-btn ${activeTab === 'minstock' ? 'active' : ''}`}\n          onClick={() => setActiveTab('minstock')}\n        >\n          <span className=\"tab-icon\">⚙️</span>\n          최소재고 설정\n        </button>\n      </div>\n\n      {/* Stock Management Tab */}\n      {activeTab === 'stock' && (\n        <div className=\"tab-content\">\n          {/* Change Type Selection */}\n          <div className=\"type-selector\">\n            <div className=\"selector-label\">작업 유형</div>\n            <div className=\"type-buttons\">\n              <button\n                type=\"button\"\n                className={`type-btn in ${changeType === 'IN' ? 'active' : ''}`}\n                onClick={() => setChangeType('IN')}\n              >\n                <span className=\"type-icon\">📥</span>\n                <span className=\"type-text\">입고</span>\n              </button>\n              <button\n                type=\"button\"\n                className={`type-btn out ${changeType === 'OUT' ? 'active' : ''}`}\n                onClick={() => setChangeType('OUT')}\n              >\n                <span className=\"type-icon\">📤</span>\n                <span className=\"type-text\">출고</span>\n              </button>\n            </div>\n          </div>\n\n          <form onSubmit={handleStockUpdate} className=\"stock-form\">\n            {/* Quick Amount Buttons */}\n            <div className=\"quick-amounts\">\n              <div className=\"quick-label\">빠른 수량</div>\n              <div className=\"quick-buttons\">\n                {quickQuantities.map(amount => (\n                  <button\n                    key={amount}\n                    type=\"button\"\n                    className=\"quick-btn\"\n                    onClick={() => setQuantity(amount.toString())}\n                  >\n                    {amount}\n                  </button>\n                ))}\n              </div>\n            </div>\n\n            {/* Quantity Input */}\n            <div className=\"form-field\">\n              <label className=\"field-label\">수량</label>\n              <div className=\"quantity-input\">\n                <input\n                  type=\"number\"\n                  value={quantity}\n                  onChange={(e) => setQuantity(e.target.value)}\n                  required\n                  min=\"0\"\n                  step=\"0.1\"\n                  placeholder=\"수량을 입력하세요\"\n                  className=\"quantity-field\"\n                />\n                <span className=\"input-unit\">{inventory.ingredient_unit}</span>\n              </div>\n            </div>\n\n            {/* Notes Input */}\n            <div className=\"form-field\">\n              <label className=\"field-label\">메모 (선택사항)</label>\n              <input\n                type=\"text\"\n                value={notes}\n                onChange={(e) => setNotes(e.target.value)}\n                placeholder=\"예: 신규 납품, 폐기 처리, 재고 조정 등\"\n                className=\"notes-field\"\n              />\n            </div>\n\n            {/* Submit Button */}\n            <button\n              type=\"submit\"\n              className={`submit-btn ${changeType.toLowerCase()}`}\n              disabled={isLoading || !quantity}\n            >\n              {isLoading ? (\n                <span className=\"loading-spinner\">⟳</span>\n              ) : (\n                <>\n                  <span className=\"btn-icon\">{changeType === 'IN' ? '📥' : '📤'}</span>\n                  <span className=\"btn-text\">\n                    {quantity ? `${changeType === 'IN' ? '+' : '-'}${quantity}${inventory.ingredient_unit} ` : ''}\n                    {changeType === 'IN' ? '입고' : '출고'}\n                  </span>\n                </>\n              )}\n            </button>\n          </form>\n        </div>\n      )}\n\n      {/* Min Stock Setting Tab */}\n      {activeTab === 'minstock' && (\n        <div className=\"tab-content\">\n          <div className=\"minstock-info\">\n            <div className=\"info-card\">\n              <div className=\"info-header\">\n                <span className=\"info-icon\">ℹ️</span>\n                <span className=\"info-title\">최소 재고란?</span>\n              </div>\n              <p className=\"info-text\">\n                재고가 이 수치 이하로 떨어지면 부족 상태로 표시됩니다.\n                적절한 값을 설정하여 재고 관리를 효율적으로 하세요.\n              </p>\n            </div>\n          </div>\n\n          <div className=\"minstock-form\">\n            <div className=\"form-field\">\n              <label className=\"field-label\">최소 재고량</label>\n              <div className=\"minstock-input\">\n                <input\n                  type=\"number\"\n                  value={minStock}\n                  onChange={(e) => setMinStock(e.target.value)}\n                  min=\"0\"\n                  step=\"0.1\"\n                  placeholder=\"최소 재고량\"\n                  className=\"minstock-field\"\n                />\n                <span className=\"input-unit\">{inventory.ingredient_unit}</span>\n              </div>\n            </div>\n\n            <div className=\"minstock-actions\">\n              <button\n                type=\"button\"\n                className=\"action-btn secondary\"\n                onClick={() => setMinStock(inventory.current_stock.toString())}\n              >\n                <span className=\"btn-icon\">🔄</span>\n                현재 재고로 설정\n              </button>\n              <button\n                type=\"button\"\n                className=\"action-btn primary\"\n                onClick={handleMinStockUpdate}\n                disabled={isLoading || minStock === inventory.min_stock.toString()}\n              >\n                {isLoading ? (\n                  <span className=\"loading-spinner\">⟳</span>\n                ) : (\n                  <>\n                    <span className=\"btn-icon\">✅</span>\n                    설정 완료\n                  </>\n                )}\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n\n    </div>\n  );\n};","import React from 'react';\nimport { InventoryHistoryWithDetails } from '../types';\n\ninterface InventoryHistoryProps {\n  history: InventoryHistoryWithDetails[];\n  limit?: number;\n}\n\nexport const InventoryHistory: React.FC<InventoryHistoryProps> = ({\n  history,\n  limit = 50\n}) => {\n  const displayHistory = limit ? history.slice(0, limit) : history;\n\n  const getChangeTypeLabel = (type: string) => {\n    switch (type) {\n      case 'IN':\n        return '입고';\n      case 'OUT':\n        return '출고';\n      case 'ADJUST':\n        return '조정';\n      default:\n        return type;\n    }\n  };\n\n  const getChangeTypeClass = (type: string) => {\n    switch (type) {\n      case 'IN':\n        return 'change-in';\n      case 'OUT':\n        return 'change-out';\n      case 'ADJUST':\n        return 'change-adjust';\n      default:\n        return '';\n    }\n  };\n\n  return (\n    <div className=\"inventory-history\">\n      <h3>재고 변동 이력 {limit && `(최근 ${limit}건)`}</h3>\n\n      <div className=\"table-container\">\n        <table className=\"history-table\">\n          <thead>\n            <tr>\n              <th>일시</th>\n              <th>재료명</th>\n              <th>구분</th>\n              <th>수량</th>\n              <th>이전 재고</th>\n              <th>변경 후 재고</th>\n              <th>메모</th>\n            </tr>\n          </thead>\n          <tbody>\n            {displayHistory.length === 0 ? (\n              <tr>\n                <td colSpan={7} className=\"no-data\">\n                  재고 변동 이력이 없습니다.\n                </td>\n              </tr>\n            ) : (\n              displayHistory.map(item => (\n                <tr key={item.id}>\n                  <td>\n                    {item.created_at\n                      ? new Date(item.created_at).toLocaleString('ko-KR')\n                      : '-'\n                    }\n                  </td>\n                  <td>{item.ingredient_name}</td>\n                  <td>\n                    <span className={`change-type ${getChangeTypeClass(item.change_type)}`}>\n                      {getChangeTypeLabel(item.change_type)}\n                    </span>\n                  </td>\n                  <td>\n                    <span className={getChangeTypeClass(item.change_type)}>\n                      {item.change_type === 'IN' ? '+' : '-'}{item.quantity} {item.ingredient_unit}\n                    </span>\n                  </td>\n                  <td>{item.previous_stock} {item.ingredient_unit}</td>\n                  <td>{item.new_stock} {item.ingredient_unit}</td>\n                  <td>{item.notes || '-'}</td>\n                </tr>\n              ))\n            )}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};","import React, { useState, useEffect } from 'react';\nimport { InventoryForm } from '../components/InventoryForm';\nimport { InventoryHistory } from '../components/InventoryHistory';\nimport { InventoryService } from '../services/inventoryService';\nimport { IngredientService } from '../services/ingredientService';\nimport { InventoryWithDetails, InventoryHistoryWithDetails, Ingredient } from '../types';\nimport LoadingSpinner from '../components/LoadingSpinner';\nimport Toast from '../components/Toast';\nimport '../styles/components/InventoryPage.css';\n\nconst InventoryPage: React.FC = () => {\n  const [inventory, setInventory] = useState<InventoryWithDetails[]>([]);\n  const [ingredients, setIngredients] = useState<Ingredient[]>([]);\n  const [selectedItem, setSelectedItem] = useState<InventoryWithDetails | null>(null);\n  const [history, setHistory] = useState<InventoryHistoryWithDetails[]>([]);\n  const [activeTab, setActiveTab] = useState<'inventory' | 'ingredients' | 'register' | 'history'>('inventory');\n  const [loading, setLoading] = useState(false);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [filterStatus, setFilterStatus] = useState<'all' | 'low' | 'out'>('all');\n  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');\n  const [toast, setToast] = useState<{ show: boolean; message: string; type: 'success' | 'error' }>({\n    show: false,\n    message: '',\n    type: 'success'\n  });\n\n  useEffect(() => {\n    loadInventory();\n    loadIngredients();\n    loadHistory();\n  }, []);\n\n  const showToast = (message: string, type: 'success' | 'error') => {\n    setToast({ show: true, message, type });\n  };\n\n  const hideToast = () => {\n    setToast({ show: false, message: '', type: 'success' });\n  };\n\n  const loadInventory = async () => {\n    setLoading(true);\n    try {\n      const data = await InventoryService.getAllInventoryWithDetails();\n      setInventory(data);\n\n      // 선택된 아이템이 있다면 업데이트\n      if (selectedItem) {\n        const updatedItem = data.find((item: InventoryWithDetails) => item.id === selectedItem.id);\n        if (updatedItem) {\n          setSelectedItem(updatedItem);\n        }\n      }\n    } catch (err) {\n      showToast('재고 정보를 불러오는데 실패했습니다.', 'error');\n      console.error(err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const loadIngredients = async () => {\n    try {\n      const data = await IngredientService.getAllIngredients();\n      setIngredients(data);\n    } catch (err) {\n      showToast('재료 정보를 불러오는데 실패했습니다.', 'error');\n      console.error(err);\n    }\n  };\n\n  const loadHistory = async () => {\n    try {\n      const data = await InventoryService.getInventoryHistoryWithDetails();\n      setHistory(data);\n    } catch (err) {\n      showToast('재고 이력을 불러오는데 실패했습니다.', 'error');\n      console.error(err);\n    }\n  };\n\n  const handleUpdateStock = async (ingredientId: string, quantity: number, type: 'IN' | 'OUT', notes?: string) => {\n    setLoading(true);\n    try {\n      await InventoryService.adjustStock(ingredientId, quantity, type, notes);\n      await loadInventory();\n      await loadHistory();\n      const typeText = type === 'IN' ? '입고' : '출고';\n      showToast(`재고가 성공적으로 ${typeText} 처리되었습니다.`, 'success');\n    } catch (err) {\n      showToast(err instanceof Error ? err.message : '재고 업데이트에 실패했습니다.', 'error');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleUpdateMinStock = async (ingredientId: string, minStock: number) => {\n    setLoading(true);\n    try {\n      await InventoryService.updateMinStock(ingredientId, minStock);\n      await loadInventory();\n      showToast('최소 재고량이 성공적으로 설정되었습니다.', 'success');\n    } catch (err) {\n      showToast('최소 재고량 설정에 실패했습니다.', 'error');\n      console.error(err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSelectItem = (item: InventoryWithDetails) => {\n    setSelectedItem(item);\n  };\n\n  // 필터링 로직\n  const filteredInventory = inventory.filter(item => {\n    const matchesSearch = item.ingredient_name.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesFilter =\n      filterStatus === 'all' ||\n      (filterStatus === 'low' && item.current_stock <= item.min_stock) ||\n      (filterStatus === 'out' && item.current_stock === 0);\n    return matchesSearch && matchesFilter;\n  });\n\n  const lowStockItems = inventory.filter(item => item.current_stock <= item.min_stock);\n  const outOfStockItems = inventory.filter(item => item.current_stock === 0);\n\n  // 재고 상태별 통계\n  const getStockStatus = (item: InventoryWithDetails) => {\n    if (item.current_stock === 0) return 'out';\n    if (item.current_stock <= item.min_stock) return 'low';\n    return 'good';\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'out': return '#ef4444';\n      case 'low': return '#f59e0b';\n      default: return '#10b981';\n    }\n  };\n\n  const getStatusText = (status: string) => {\n    switch (status) {\n      case 'out': return '품절';\n      case 'low': return '부족';\n      default: return '충분';\n    }\n  };\n\n  if (loading && inventory.length === 0) {\n    return <LoadingSpinner size=\"large\" message=\"재고 정보를 불러오는 중...\" overlay />;\n  }\n\n  return (\n    <div className=\"modern-inventory-page\">\n      {/* Header with glassmorphism effect */}\n      <div className=\"page-header\">\n        <div className=\"header-content\">\n          <div className=\"header-title\">\n            <div className=\"title-icon\">🏢</div>\n            <div>\n              <h1>Smart Inventory</h1>\n              <p>지능형 재고 관리 시스템</p>\n            </div>\n          </div>\n          <div className=\"header-actions\">\n            <button className=\"refresh-btn\" onClick={() => { loadInventory(); loadIngredients(); }}>\n              <span>🔄</span>\n              새로고침\n            </button>\n          </div>\n        </div>\n\n        {/* Statistics Cards */}\n        <div className=\"stats-grid\">\n          <div className=\"stat-card total\">\n            <div className=\"stat-icon\">📦</div>\n            <div className=\"stat-content\">\n              <div className=\"stat-number\">{inventory.length}</div>\n              <div className=\"stat-label\">총 재고품목</div>\n            </div>\n          </div>\n          <div className=\"stat-card low\">\n            <div className=\"stat-icon\">⚠️</div>\n            <div className=\"stat-content\">\n              <div className=\"stat-number\">{lowStockItems.length}</div>\n              <div className=\"stat-label\">부족 재고</div>\n            </div>\n          </div>\n          <div className=\"stat-card out\">\n            <div className=\"stat-icon\">🚨</div>\n            <div className=\"stat-content\">\n              <div className=\"stat-number\">{outOfStockItems.length}</div>\n              <div className=\"stat-label\">품절</div>\n            </div>\n          </div>\n          <div className=\"stat-card ingredients\">\n            <div className=\"stat-icon\">🥬</div>\n            <div className=\"stat-content\">\n              <div className=\"stat-number\">{ingredients.length}</div>\n              <div className=\"stat-label\">등록 재료</div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Navigation Tabs */}\n      <div className=\"nav-container\">\n        <div className=\"nav-tabs\">\n          {[\n            { id: 'inventory', label: '재고현황', icon: '📋', count: inventory.length },\n            { id: 'ingredients', label: '재료목록', icon: '🥬', count: ingredients.length },\n            { id: 'register', label: '재고등록', icon: '➕', count: null },\n            { id: 'history', label: '변동이력', icon: '📈', count: history.length }\n          ].map(tab => (\n            <button\n              key={tab.id}\n              className={`nav-tab ${activeTab === tab.id ? 'active' : ''}`}\n              onClick={() => setActiveTab(tab.id as any)}\n            >\n              <span className=\"tab-icon\">{tab.icon}</span>\n              <span className=\"tab-label\">{tab.label}</span>\n              {tab.count !== null && <span className=\"tab-count\">{tab.count}</span>}\n            </button>\n          ))}\n        </div>\n      </div>\n\n      {/* Content Area */}\n      <div className=\"content-area\">\n        {/* 재고 현황 탭 */}\n        {activeTab === 'inventory' && (\n          <div className=\"inventory-section\">\n            {/* Search and Filter Bar */}\n            <div className=\"toolbar\">\n              <div className=\"search-section\">\n                <div className=\"search-box\">\n                  <span className=\"search-icon\">🔍</span>\n                  <input\n                    type=\"text\"\n                    placeholder=\"재료명으로 검색...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                  />\n                </div>\n                <div className=\"filter-group\">\n                  <select\n                    value={filterStatus}\n                    onChange={(e) => setFilterStatus(e.target.value as any)}\n                    className=\"filter-select\"\n                  >\n                    <option value=\"all\">전체 상태</option>\n                    <option value=\"good\">충분</option>\n                    <option value=\"low\">부족</option>\n                    <option value=\"out\">품절</option>\n                  </select>\n                </div>\n              </div>\n\n              <div className=\"view-controls\">\n                <button\n                  className={`view-btn ${viewMode === 'grid' ? 'active' : ''}`}\n                  onClick={() => setViewMode('grid')}\n                >\n                  ⊞\n                </button>\n                <button\n                  className={`view-btn ${viewMode === 'list' ? 'active' : ''}`}\n                  onClick={() => setViewMode('list')}\n                >\n                  ☰\n                </button>\n              </div>\n            </div>\n\n            {/* Inventory Grid/List */}\n            <div className={`inventory-display ${viewMode}`}>\n              {filteredInventory.length === 0 ? (\n                <div className=\"empty-state\">\n                  <div className=\"empty-icon\">📭</div>\n                  <h3>검색 결과가 없습니다</h3>\n                  <p>다른 검색어나 필터를 시도해보세요</p>\n                </div>\n              ) : (\n                filteredInventory.map(item => {\n                  const status = getStockStatus(item);\n                  return (\n                    <div\n                      key={item.id}\n                      className={`inventory-card ${status} ${selectedItem?.id === item.id ? 'selected' : ''}`}\n                      onClick={() => handleSelectItem(item)}\n                    >\n                      <div className=\"card-header\">\n                        <div className=\"ingredient-name\">{item.ingredient_name}</div>\n                        <div className={`status-badge ${status}`}>\n                          {getStatusText(status)}\n                        </div>\n                      </div>\n\n                      <div className=\"stock-info\">\n                        <div className=\"current-stock\">\n                          <span className=\"stock-number\">{item.current_stock}</span>\n                          <span className=\"stock-unit\">{item.ingredient_unit}</span>\n                        </div>\n                        <div className=\"min-stock\">\n                          최소: {item.min_stock}{item.ingredient_unit}\n                        </div>\n                      </div>\n\n                      <div className=\"stock-bar\">\n                        <div\n                          className=\"stock-progress\"\n                          style={{\n                            width: `${Math.min((item.current_stock / (item.min_stock * 2)) * 100, 100)}%`,\n                            backgroundColor: getStatusColor(status)\n                          }}\n                        />\n                      </div>\n\n                      <div className=\"card-footer\">\n                        <span className=\"last-updated\">\n                          {item.updated_at ? new Date(item.updated_at).toLocaleDateString('ko-KR') : '날짜 없음'}\n                        </span>\n                      </div>\n                    </div>\n                  );\n                })\n              )}\n            </div>\n\n            {/* Selected Item Management Panel */}\n            {selectedItem && (\n              <div className=\"management-panel\">\n                <div className=\"panel-header\">\n                  <h3>재고 관리</h3>\n                  <div className=\"selected-info\">\n                    {selectedItem.ingredient_name} ({selectedItem.ingredient_unit})\n                  </div>\n                </div>\n                <InventoryForm\n                  inventory={selectedItem}\n                  onUpdateStock={handleUpdateStock}\n                  onUpdateMinStock={handleUpdateMinStock}\n                />\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* 재료 목록 탭 */}\n        {activeTab === 'ingredients' && (\n          <div className=\"ingredients-section\">\n            <div className=\"section-header\">\n              <h2>등록된 재료 목록</h2>\n              <p>시스템에 등록된 모든 재료를 확인할 수 있습니다</p>\n            </div>\n\n            <div className=\"ingredients-grid\">\n              {ingredients.map(ingredient => {\n                const inventoryItem = inventory.find(inv => inv.ingredient_id === ingredient.id);\n                return (\n                  <div key={ingredient.id} className=\"ingredient-card\">\n                    <div className=\"ingredient-header\">\n                      <h4>{ingredient.name}</h4>\n                      <span className=\"unit-badge\">{ingredient.unit}</span>\n                    </div>\n\n                    {inventoryItem ? (\n                      <div className=\"inventory-status\">\n                        <div className=\"stock-display\">\n                          <span className=\"current\">{inventoryItem.current_stock}</span>\n                          <span className=\"separator\">/</span>\n                          <span className=\"min\">{inventoryItem.min_stock}</span>\n                          <span className=\"unit\">{ingredient.unit}</span>\n                        </div>\n                        <div className={`status ${getStockStatus(inventoryItem)}`}>\n                          {getStatusText(getStockStatus(inventoryItem))}\n                        </div>\n                      </div>\n                    ) : (\n                      <div className=\"no-inventory\">\n                        <span>재고 정보 없음</span>\n                      </div>\n                    )}\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        )}\n\n        {/* 재고 등록 탭 */}\n        {activeTab === 'register' && (\n          <div className=\"register-section\">\n            {/* Quick Stats */}\n            <div className=\"register-stats\">\n              <div className=\"quick-stat-card\">\n                <div className=\"stat-icon\">📦</div>\n                <div className=\"stat-info\">\n                  <div className=\"stat-number\">{inventory.length}</div>\n                  <div className=\"stat-label\">관리 중인 재료</div>\n                </div>\n              </div>\n              <div className=\"quick-stat-card warning\">\n                <div className=\"stat-icon\">⚠️</div>\n                <div className=\"stat-info\">\n                  <div className=\"stat-number\">{lowStockItems.length}</div>\n                  <div className=\"stat-label\">부족 재고</div>\n                </div>\n              </div>\n              <div className=\"quick-stat-card danger\">\n                <div className=\"stat-icon\">🚨</div>\n                <div className=\"stat-info\">\n                  <div className=\"stat-number\">{outOfStockItems.length}</div>\n                  <div className=\"stat-label\">품절</div>\n                </div>\n              </div>\n            </div>\n\n            {/* Main Registration Area */}\n            <div className=\"register-main\">\n              {/* Material Selection */}\n              <div className=\"material-selection\">\n                <div className=\"selection-header\">\n                  <h3>🎯 재료 선택</h3>\n                  <p>재고를 관리할 재료를 선택하세요</p>\n                </div>\n\n                <div className=\"material-grid\">\n                  {inventory.map(item => {\n                    const status = getStockStatus(item);\n                    return (\n                      <div\n                        key={item.id}\n                        className={`material-item ${status} ${selectedItem?.id === item.id ? 'selected' : ''}`}\n                        onClick={() => handleSelectItem(item)}\n                      >\n                        <div className=\"material-header\">\n                          <span className=\"material-name\">{item.ingredient_name}</span>\n                          <span className={`status-dot ${status}`}></span>\n                        </div>\n                        <div className=\"material-stock\">\n                          <span className=\"current\">{item.current_stock}</span>\n                          <span className=\"unit\">{item.ingredient_unit}</span>\n                          <span className=\"min-info\">최소: {item.min_stock}</span>\n                        </div>\n                        <div className=\"material-status\">\n                          <span className={`status-text ${status}`}>\n                            {getStatusText(status)}\n                          </span>\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              </div>\n\n              {/* Registration Form */}\n              {selectedItem && (\n                <div className=\"register-form-area\">\n                  <div className=\"form-header\">\n                    <div className=\"selected-material\">\n                      <div className=\"material-info\">\n                        <h3>📝 재고 관리</h3>\n                        <div className=\"material-detail\">\n                          <span className=\"name\">{selectedItem.ingredient_name}</span>\n                          <span className=\"unit\">({selectedItem.ingredient_unit})</span>\n                          <span className={`status ${getStockStatus(selectedItem)}`}>\n                            {getStatusText(getStockStatus(selectedItem))}\n                          </span>\n                        </div>\n                      </div>\n                      <div className=\"current-info\">\n                        <div className=\"info-item\">\n                          <span className=\"label\">현재 재고</span>\n                          <span className=\"value\">{selectedItem.current_stock} {selectedItem.ingredient_unit}</span>\n                        </div>\n                        <div className=\"info-item\">\n                          <span className=\"label\">최소 재고</span>\n                          <span className=\"value\">{selectedItem.min_stock} {selectedItem.ingredient_unit}</span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"form-content\">\n                    <InventoryForm\n                      inventory={selectedItem}\n                      onUpdateStock={handleUpdateStock}\n                      onUpdateMinStock={handleUpdateMinStock}\n                    />\n                  </div>\n\n                  {/* Quick Actions */}\n                  <div className=\"quick-actions\">\n                    <h4>⚡ 빠른 작업</h4>\n                    <div className=\"action-buttons\">\n                      <button\n                        className=\"quick-btn in\"\n                        onClick={() => handleUpdateStock(selectedItem.ingredient_id, 10, 'IN', '빠른 입고')}\n                      >\n                        <span>📥</span>\n                        +10 입고\n                      </button>\n                      <button\n                        className=\"quick-btn out\"\n                        onClick={() => handleUpdateStock(selectedItem.ingredient_id, 5, 'OUT', '빠른 출고')}\n                      >\n                        <span>📤</span>\n                        -5 출고\n                      </button>\n                      <button\n                        className=\"quick-btn reset\"\n                        onClick={() => handleUpdateMinStock(selectedItem.ingredient_id, selectedItem.current_stock)}\n                      >\n                        <span>🔄</span>\n                        최소재고 현재값으로\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              )}\n\n              {/* Empty State */}\n              {!selectedItem && (\n                <div className=\"register-empty\">\n                  <div className=\"empty-content\">\n                    <div className=\"empty-icon\">🎯</div>\n                    <h3>재료를 선택해주세요</h3>\n                    <p>위에서 재고를 관리할 재료를 선택하면<br />상세한 재고 관리 도구가 나타납니다</p>\n                    <div className=\"selection-hint\">\n                      <span className=\"hint-item\">💡 팁: 부족한 재고부터 관리해보세요</span>\n                    </div>\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n\n        {/* 변동 이력 탭 */}\n        {activeTab === 'history' && (\n          <div className=\"history-section\">\n            <div className=\"section-header\">\n              <h2>재고 변동 이력</h2>\n              <p>모든 재고 변동 내역을 시간순으로 확인할 수 있습니다</p>\n            </div>\n            <InventoryHistory history={history} limit={100} />\n          </div>\n        )}\n      </div>\n\n      {/* Toast Notification */}\n      {toast.show && (\n        <Toast\n          message={toast.message}\n          type={toast.type}\n          onClose={hideToast}\n        />\n      )}\n\n    </div>\n  );\n};\n\nexport default InventoryPage;","import React, { useEffect, useState } from 'react';\nimport '../styles/components/Toast.css';\n\ninterface ToastProps {\n  message: string;\n  type: 'success' | 'error' | 'warning' | 'info';\n  duration?: number;\n  onClose: () => void;\n}\n\nconst Toast: React.FC<ToastProps> = ({\n  message,\n  type,\n  duration = 3000,\n  onClose\n}) => {\n  const [isVisible, setIsVisible] = useState(true);\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setIsVisible(false);\n      setTimeout(onClose, 300); // Wait for animation to complete\n    }, duration);\n\n    return () => clearTimeout(timer);\n  }, [duration, onClose]);\n\n  const getIcon = () => {\n    switch (type) {\n      case 'success':\n        return '✅';\n      case 'error':\n        return '❌';\n      case 'warning':\n        return '⚠️';\n      case 'info':\n        return 'ℹ️';\n      default:\n        return '';\n    }\n  };\n\n  return (\n    <div className={`toast toast-${type} ${isVisible ? 'toast-show' : 'toast-hide'}`}>\n      <div className=\"toast-content\">\n        <span className=\"toast-icon\">{getIcon()}</span>\n        <span className=\"toast-message\">{message}</span>\n        <button className=\"toast-close\" onClick={() => setIsVisible(false)}>\n          ×\n        </button>\n      </div>\n\n    </div>\n  );\n};\n\n// Toast Manager Component\ninterface ToastManagerProps {\n  toasts: Array<{\n    id: string;\n    message: string;\n    type: 'success' | 'error' | 'warning' | 'info';\n    duration?: number;\n  }>;\n  onRemoveToast: (id: string) => void;\n}\n\nexport const ToastManager: React.FC<ToastManagerProps> = ({ toasts, onRemoveToast }) => {\n  return (\n    <>\n      {toasts.map((toast, index) => (\n        <div\n          key={toast.id}\n          style={{\n            position: 'fixed',\n            top: `${2 + index * 5}rem`,\n            right: '2rem',\n            zIndex: 1001 + index\n          }}\n        >\n          <Toast\n            message={toast.message}\n            type={toast.type}\n            duration={toast.duration}\n            onClose={() => onRemoveToast(toast.id)}\n          />\n        </div>\n      ))}\n    </>\n  );\n};\n\nexport default Toast;","import React from 'react';\n\ninterface LoadingSpinnerProps {\n  size?: 'small' | 'medium' | 'large';\n  message?: string;\n  overlay?: boolean;\n}\n\nconst LoadingSpinner: React.FC<LoadingSpinnerProps> = ({\n  size = 'medium',\n  message,\n  overlay = false\n}) => {\n  const sizeClass = `spinner-${size}`;\n\n  const spinner = (\n    <div className={`loading-container ${overlay ? 'loading-overlay' : ''}`}>\n      <div className={`spinner ${sizeClass}`}>\n        <div className=\"spinner-ring\">\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n        </div>\n      </div>\n      {message && <p className=\"loading-message\">{message}</p>}\n\n      <style>{`\n        .loading-container {\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n          justify-content: center;\n          gap: 1rem;\n        }\n\n        .loading-overlay {\n          position: fixed;\n          top: 0;\n          left: 0;\n          right: 0;\n          bottom: 0;\n          background-color: rgba(255, 255, 255, 0.9);\n          z-index: 999;\n          backdrop-filter: blur(2px);\n        }\n\n        .spinner {\n          display: inline-block;\n          position: relative;\n        }\n\n        .spinner-small {\n          width: 24px;\n          height: 24px;\n        }\n\n        .spinner-medium {\n          width: 40px;\n          height: 40px;\n        }\n\n        .spinner-large {\n          width: 64px;\n          height: 64px;\n        }\n\n        .spinner-ring {\n          display: inline-block;\n          position: relative;\n          width: 100%;\n          height: 100%;\n        }\n\n        .spinner-ring div {\n          box-sizing: border-box;\n          display: block;\n          position: absolute;\n          width: 100%;\n          height: 100%;\n          border: 3px solid #2196f3;\n          border-radius: 50%;\n          animation: spinner-animation 1.2s cubic-bezier(0.5, 0, 0.5, 1) infinite;\n          border-color: #2196f3 transparent transparent transparent;\n        }\n\n        .spinner-ring div:nth-child(1) {\n          animation-delay: -0.45s;\n        }\n\n        .spinner-ring div:nth-child(2) {\n          animation-delay: -0.3s;\n        }\n\n        .spinner-ring div:nth-child(3) {\n          animation-delay: -0.15s;\n        }\n\n        @keyframes spinner-animation {\n          0% {\n            transform: rotate(0deg);\n          }\n          100% {\n            transform: rotate(360deg);\n          }\n        }\n\n        .loading-message {\n          margin: 0;\n          color: #666;\n          font-size: 0.9rem;\n          text-align: center;\n        }\n\n        .spinner-small + .loading-message {\n          font-size: 0.8rem;\n        }\n\n        .spinner-large + .loading-message {\n          font-size: 1rem;\n        }\n      `}</style>\n    </div>\n  );\n\n  return spinner;\n};\n\nexport default LoadingSpinner;"],"names":["InventoryForm","_ref","inventory","onUpdateStock","onUpdateMinStock","quantity","setQuantity","useState","changeType","setChangeType","notes","setNotes","minStock","setMinStock","min_stock","toString","activeTab","setActiveTab","isLoading","setIsLoading","useEffect","isLowStock","current_stock","isOutOfStock","getStockStatus","getStockStatusColor","_jsxs","className","children","_jsx","ingredient_unit","concat","style","backgroundColor","getStockStatusText","width","Math","min","onClick","type","onSubmit","async","e","preventDefault","quantityValue","parseFloat","isNaN","alert","ingredient_id","trim","undefined","error","console","map","amount","value","onChange","target","required","step","placeholder","toLowerCase","disabled","_Fragment","minStockValue","InventoryHistory","history","limit","displayHistory","slice","getChangeTypeLabel","getChangeTypeClass","length","colSpan","item","created_at","Date","toLocaleString","ingredient_name","change_type","previous_stock","new_stock","id","InventoryPage","setInventory","ingredients","setIngredients","selectedItem","setSelectedItem","setHistory","loading","setLoading","searchTerm","setSearchTerm","filterStatus","setFilterStatus","viewMode","setViewMode","toast","setToast","show","message","loadInventory","loadIngredients","loadHistory","showToast","data","InventoryService","getAllInventoryWithDetails","updatedItem","find","err","IngredientService","getAllIngredients","getInventoryHistoryWithDetails","handleUpdateStock","ingredientId","adjustStock","Error","handleUpdateMinStock","updateMinStock","handleSelectItem","filteredInventory","filter","matchesSearch","includes","matchesFilter","lowStockItems","outOfStockItems","getStatusColor","status","getStatusText","LoadingSpinner","size","overlay","label","icon","count","tab","updated_at","toLocaleDateString","ingredient","inventoryItem","inv","name","unit","Toast","onClose","hideToast","duration","isVisible","setIsVisible","timer","setTimeout","clearTimeout","getIcon","sizeClass"],"sourceRoot":""}